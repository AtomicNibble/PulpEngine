
Win32:
    ☐ Move all windows GUI stuff to sperate thread so we can still process frames when moving window around.

Common:

  ✔ Work out why asserts generate so much bloat. @done (18-11-12 21:39)
      was sourceInfo.

Core:

  ☐ Sort out potential job system lock, due to not always helping with work when waiting.
  ☐ See if can make job profiler drawing better, by not drawing more blocks than pixels.
    - Also if we have lots of jobs on same pixel maybe blend the colors?

 ✔ Finish off and test replay logic of input system. @done (18-11-10 17:17)
 ☐ Make replay system support core notifications. Stuff like level loaded.
   This way replays still work if level takes while to load.
   Or do we want replays to only be for levels not menus.

   If we don't have replays be based on the start of a level.
   How can we reliably start a replay, like a replay in the middle of the map
   is not much use is it?


 ✔ Tidy up console code. @done (18-09-17 18:35)

   FileSys:
      ✔ Virtual file system needs bit more work, stuff for allowing tools to write to absolute paths without getting sandboxed. @done (18-10-22 21:26)
   See a3ebe074bdd66ad8938c6654546446d518354139 for current hack

     ✔ Don't apply OS slashes until we hit OS specific code paths. @done (18-10-16 22:42)
     ☐ Limit the use of wchar_t to win32 specific code.
         All relative paths are ascii only.
         So I only need unicode in tools. for absolute paths.
         Which should really jsut be utf-8

Game:

  ✔ Main menu need to open again @done (18-10-05 17:36)
    I need to know when the state changes and basically reset menu to main.

  ☐ Make menus for lobby etc.

  ✔ Fix ammo been above clip size on spawn. @done (18-10-20 14:20)
 ☐ Support setting max store counts for each ammo type. Currently it's same for all types.

 ✔ Fix sound not working when reload level. @done (18-10-27 12:28)

 ☐ Make the bullet ray staring position correct.
 ✔ Support toggle: crouch, run, zoom @done (18-11-12 20:14)
 ☐ Make it so each player has a calculated render view.
     - Or should we just make the render view whem we need it?
   ☐ Players weapons should be able to effect fov in the render view
 ✔ Only draw pos for local player. @done (18-11-12 20:49)
 ☐ Clients can't see host body.
   So I need to update the render ents for all other players.
   Currently i only do that in runuserCmdForPlayer, rip.

  Networking:

    ☐ Sync the players better, basically have some sort of 3rd person model.
        - Basically fix it so host and client can see same shit, currently only host can see some things.

    ☐ If the server thinks we are not loaded / connected it won't send us snapshots.
      The client should notice this and do something about it.

   ☐ For debugging should have like no timeouts so can pause shit.
   ☐ Add some snapshot debugging?
   ☐ Make it so when we leave a game peer connections are closed before state change
       so we don't get and packets coming from the old game host when in idle.
   ☐ Should we always bind a port? or online for online stuff.
       Well we only need it for hosting, since peers are connecting to server.


Engine:

  ✔ Make cntl+enter toggle fullscreen @done (18-08-27 17:11)
  ✔ Support borderless window mode @done (18-08-27 17:11)
    So I can make a borderless window, just need setting for it.
  ☐ Expose resolution settings
  ✔ Support setting the clear color for various render buffers @done (18-08-27 22:38)
      do i want diffrent clear colors for buffers?
      guess might be usefull for debugging.
      so can do stuff like set 2d clear col for testing, kinky.
  ☐ Commands for changing the render scale on fly (for fillrate testing)
  ☐ Allow maintaining aspect ratio? (basically don't stretch render buffers)
  ☐ Make it so GUI knows about new render size without a frame of delay
  ☐ Fix materials been able to play videos.
    ☐ If a video is playing but not visible or used don't bother update render text.
        Think it's kinda safe to assume currently if playing it's used.

  ☐ Support single threaded command list generation for better debug.
  ☐ Support unsorted command lists.

  GUI:
   ☐ Support combo boxes (for selecting resolution etc)
   ☐ Support scrollable areas (will be probs needed for settings menus)
   ☐ Support passing data to GUI scripts, stuff like resolution list.

   ☐ Stuff like popup menu i don't really know the size till after?
     which makes something like rendering a second step atractive.
     But i could pre calculate it, is this gonna crop up again?
     Dunno don't think i support sizing stuff based on content, will i want to?
     Don't think there is a need.

     One problem have is that if we have a button
     that creates another window and adds stuff it needs to be drawn on diffrent layer.
     so basicalyl need render buffers for each window.

Network:

 ☐  Implement congestion control.
 ☐  Support a debug graph that shows like network usage with category support.


Font:

  ☐ Work out if should prebake different resolutions for SDF:
    don't think that should be required as kinda defaults the whole point.
    But my font rendering is pretty shitty currently.
    Think it's just pixel offset tho, which I removed to prevent snapping in 3d :/

Script:

  ☐ Pre process scripts for includes, so we know all includes upfront.

Sound:

  ✔ Support wwise packages (basically bundled streaming files) @done (18-08-26 14:00)
    ✔ Generate the packages @done (18-08-25 23:49)
    ✔ Support loading files from them @done (18-08-26 14:00)
    ☐ Decide if want to async load package headers (means banks can't be in packages)
      ✔ Should just time them for now. @done (18-10-06 11:43)
  ✔ Add some basic debug ui, with like active objects and such. @done (18-09-15 00:21)

Video:

  ✔ Support audio sync, somehow. @done (18-09-09 14:07)
    Think created vorbis audio then decoded myself and feeding into wwise via Audio Input will be the wayto go.
    So for wise I need to make a audio SFX object and instead of importing a wav I add a Audio Input source.
    Then I need play and stop events attached to that event, then I post that event to a game object.
    which will trigger the Audio Input source plugin to start calling my callbacks for data (kinky)
    The plugin tell me the playing id so I need to know what data it wants based on playing id, which I will get from posting the event.

     ✔ Change it so I take webm as source format but then process it so we get something simular to IVF but with vorbis audio. @done (18-09-01 20:51)

     ✔ Add support for decoding vorbis audio. @done (18-09-03 22:53)
       I probs want to store video and audio buffers next to each other in file so can load as blocks.
       Since webm stores video and audio data interleved i just leave it like that.
 ✔ Fix frame lookahead when IO buffer wraps around. @done (18-09-06 13:58)
 ✔ Actually use the display times for video frames @done (18-09-08 13:37)
 ☐ Actually use the display times for audio frames
     - Will need to keep track of when wise is pulling the source data?
 ☐ Test decoding not been able to keep up.
   ☐ Stall audio if video jumpy?
 ☐ Need to handle when the games frame rate is lower than video, skip video frames.
 ☐ Check what happens when we suspend audio system.
 ✔ Have the video debug move if profiler enabled etc, just need to pass postion basically. @done (18-09-13 18:58)

Render:

  ☐ Fix rendering on AMD cards (some sync issue?)
  ☐ Need to support uploading big textures.
    The allocator i use has fixed page sizes, so limits texture size.
    - should check if using that allocator is really what i want.

 ✔ Make it so the command lists can be generated but not executed, then the 3dEngine can dispatch multiple command lists as once, since the dispatch has fixed overhead. @done (18-09-29 16:17)
     For example we could generated both 2d and 3d command lists, but dispatch the lists at same time. But maybe it's better to build the 2d dispatch it then start building 3d dunno.
      But I need to exposes the flexibility.

 ☐ BufferManager currently uses a single threaded arena but it gets called from jobs.
     Need to decide who takes a lock.

 ✔ Don't load shader source if we don't need it. @done (18-10-19 17:32)
    Requires setting a var tho.

 ☐ The default texture was not set correct for default material which results in corrupt rendering on AMD cards.
   I still get the same corrupt issue for videos on AMD tho.

AssetDB:

  ✔ Change the hash function to for thumbs sha1 @done (18-08-25 15:18)
    ✔ Change the thumb hash coloum to be BLOB type @done (18-10-06 12:48)
      Not really needed.
  ✔ Change hash function for raw assets to xxHash @done (18-09-30 12:11)
  ✔ Support repack for images, so can optimise compression. @done (18-09-30 22:48)
  ✔ Move compiled hashes out into a converter cache db. @done (18-09-30 22:48)
     This way we can compile all assets without editing assetDB which is commited.
  ✔ Make it raw_files refrence a file_id so we can keep track of old rawFiles and list them all, making it easy to clean up unused files and rollback. @done (18-10-05 17:30)

 ✔ Support assets becoming stale if a ref has changed. @done (18-10-09 21:21)
   Some assets like animations use a skelton when compiling, if that changes
   * This is only done for anims currently


 ☐ Handle multiple people adding/changing assets.
     Think dumping the data to text file will work best, then can diff the slut.
   ✔ Support exporting DB to json @done (18-10-07 12:23)
   ☐ Support importing json to DB

Converter:

 ✔ Support generating list of dependencies for each asset @done (18-10-08 18:34)

Linker:
  ✔ Build level packs @done (18-10-11 20:10)
    ✔ Take just a level name for building. @done (18-10-11 18:44)
    ✔ Looks for assetfile for extra assets @done (18-10-11 18:44)
    ✔ Adds the level to pak. @done (18-10-11 20:09)
  ✔ include all asset dependacies. @done (18-10-08 23:28)
    Should probs switch to using the ConverterLib instead of assetDb directly.
    So that the linker can compile assets or is that not it's job?

  ✘ Think be nice to support wild card includes for assetLists. @cancelled (18-10-16 22:39)
    Stuff like the menus and scripts, just wannt include them all tbh.
    Or is this justa UI problem? like if an just click them all in a UI it's not a problem.

  ✔ Support building a pack with memory hint flag set. @done (18-10-12 17:24)

  ✔ Need to add files with thier actual file names. @done (18-10-14 14:11)
    Since it's basically a packing of a dir.

 ✔ Should scan the ent list since that is static, then add as dep. @done (18-10-18 21:03)
     For now just hard code the ent types.
     Can make it more data driven later but think it's unlikley to be needed.

AssetPak:

  ✔ Support techdefs in packages. @done (18-10-13 13:58)
  ✔ Support shaders in packages. @done (18-10-13 13:58)
  ✔ Support loose files? @done (18-10-16 22:40)
    You can now add asset dir's that are not tracked by db, like script and menu.

LevelBuilder:

  ✔ Generate asset lists for level @done (18-09-09 10:55)
        Curently it's just materials and models. The models materials are not inc.
  ☐ Bake lighting for level
    Rip

Sql:

  ✔ Don't re export functions in dll's @done (18-10-24 17:11)
    Currently if link sql.dll you end up exporting some of same stuff sql.dll exports.

 UnitTests:

   Containers:
     ✔ FixedByteStream @done (18-09-15 18:05)
     ✔ FixedByteStreamRing @done (18-09-15 17:48)

   Maths:
     ☐ The Angles, Quat, Mat conversions seams broken so fix tests + logic.