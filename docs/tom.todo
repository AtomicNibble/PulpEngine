
Core:

  ☐ Sort out potential job system lock, due to not always helping with work when waiting.
  ☐ See if can make job profiler drawing better, by not drawing more blocks than pixels.
    - Also if we have lots of jobs on same pixel maybe blend the colors?

 ☐ Finish off and test replay logic of input system.

 ✔ Tidy up console code. @done (18-09-17 18:35)

Game:

  ✔ Main menu need to open again @done (18-10-05 17:36)
    I need to know when the state changes and basically reset menu to main.

  ☐ Make menus for lobby etc.

  Netorking:

    ☐ Sync the players better, basically have some sort of 3rd person model.
        - Basically fix it so host and client can see same shit, currently only host can see some things.


Engine:

  ✔ Make cntl+enter toggle fullscreen @done (18-08-27 17:11)
  ✔ Support borderless window mode @done (18-08-27 17:11)
    So I can make a borderless window, just need setting for it.
  ☐ Expose resolution settings
  ✔ Support setting the clear color for various render buffers @done (18-08-27 22:38)
      do i want diffrent clear colors for buffers?
      guess might be usefull for debugging.
      so can do stuff like set 2d clear col for testing, kinky.
  ☐ Commands for changing the render scale on fly (for fillrate testing)
  ☐ Allow maintaining aspect ration? (basically don't stretch render buffers)
  ☐ Make it so GUI knows about new render size without a frame of delay
  ☐ Fix materials been able to play videos.
    ☐ If a video is playing but not visible or used don't bother update render text.
        Think it's kinda safe to assume currently if playing it's used.

  ☐ Support single threaded command list generation for better debug.
  ☐ Support unsorted command lists.

  GUI:
   ☐ Support combo boxes (for selecting resolution etc)
   ☐ Support scrollable areas (will be probs needed for settings menus)
   ☐ Support passing data to GUI scripts, stuff like resolution list.

   ☐ Stuff like popup menu i don't really know the size till after?
     which makes something like rendering a second step atractive.
     But i could pre calculate it, is this gonna crop up again?
     Dunno don't think i support sizing stuff based on content, will i want to?
     Don't think there is a need.

     One problem have is that if we have a button
     that creates another window and adds stuff it needs to be drawn on diffrent layer.
     so basicalyl need render buffers for each window.

Network:

  ☐  Implement congestion control.

Font:

  ☐ Work out if should prebake different resolutions for SDF:
    don't think that should be required as kinda defaults the whole point.
    But my font rendering is pretty shitty currently.
    Think it's just pixel offset tho, which I removed to prevent snapping in 3d :/

Script:

  ☐ Pre process scripts for includes, so we know all includes upfront.

Sound:

  ✔ Support wwise packages (basically bundled streaming files) @done (18-08-26 14:00)
    ✔ Generate the packages @done (18-08-25 23:49)
    ✔ Support loading files from them @done (18-08-26 14:00)
    ☐ Decide if want to async load package headers (means banks can't be in packages)

  ✔ Add some basic debug ui, with like active objects and such. @done (18-09-15 00:21)

Video:

  ✔ Support audio sync, somehow. @done (18-09-09 14:07)
    Think created vorbis audio then decoded myself and feeding into wwise via Audio Input will be the wayto go.
    So for wise I need to make a audio SFX object and instead of importing a wav I add a Audio Input source.
    Then I need play and stop events attached to that event, then I post that event to a game object.
    which will trigger the Audio Input source plugin to start calling my callbacks for data (kinky)
    The plugin tell me the playing id so I need to know what data it wants based on playing id, which I will get from posting the event.

     ✔ Change it so I take webm as source format but then process it so we get something simular to IVF but with vorbis audio. @done (18-09-01 20:51)

     ✔ Add support for decoding vorbis audio. @done (18-09-03 22:53)
       I probs want to store video and audio buffers next to each other in file so can load as blocks.
       Since webm stores video and audio data interleved i just leave it like that.
 ✔ Fix frame lookahead when IO buffer wraps around. @done (18-09-06 13:58)
 ✔ Actually use the display times for video frames @done (18-09-08 13:37)
 ☐ Actually use the display times for audio frames
     - Will need to keep track of when wise is pulling the source data?
 ☐ Test decoding not been able to keep up.
   ☐ Stall audio if video jumpy?
 ☐ Check what happens when we suspend audio system.
 ✔ Have the video debug move if profiler enabled etc, just need to pass postion basically. @done (18-09-13 18:58)

Render:

  ☐ Fix rendering on AMD cards (some sync issue?)
  ☐ Need to support uploading big textures.
    The allocator i use has fixed page sizes, so limits texture size.
    - should check if using that allocator is really what i want.

 ✔ Make it so the command lists can be generated but not executed, then the 3dEngine can dispatch multiple command lists as once, since the dispatch has fixed overhead. @done (18-09-29 16:17)
     For example we could generated both 2d and 3d command lists, but dispatch the lists at same time. But maybe it's better to build the 2d dispatch it then start building 3d dunno.
      But I need to exposes the flexibility.

AssetDB:

  ✔ Change the hash function to for thumbs sha1 @done (18-08-25 15:18)
    ✘ Change the thumb hash coloum to be BLOB type @cancelled (18-09-30 22:49)
      Not really needed.
  ✔ Change hash function for raw assets to xxHash @done (18-09-30 12:11)
  ✔ Support repack for images, so can optimise compression. @done (18-09-30 22:48)
  ✔ Move compiled hashes out into a converter cache db. @done (18-09-30 22:48)
     This way we can compile all assets without editing assetDB which is commited.
  ✔ Make it raw_files refrence a file_id so we can keep track of old rawFiles and list them all, making it easy to clean up unused files and rollback. @done (18-10-05 17:30)

AssetPak:

  ☐ Support techdefs in packages.
  ☐ Support shaders in packages.
  ☐ Support loose files?

LevelBuilder:

  ✔ Generate asset lists for level @done (18-09-09 10:55)
        Curently it's just materials and models. The models materials are not inc.
  ☐ Bake lighting for level


Linker:
  ☐ Build level packs

 UnitTests:

   Containers:
     ✔ FixedByteStream @done (18-09-15 18:05)
     ✔ FixedByteStreamRing @done (18-09-15 17:48)