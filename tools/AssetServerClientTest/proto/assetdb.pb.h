// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assetdb.proto

#ifndef PROTOBUF_assetdb_2eproto__INCLUDED
#define PROTOBUF_assetdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Potato {
namespace ProtoBuf {
namespace AssetDB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_assetdb_2eproto();
void protobuf_AssignDesc_assetdb_2eproto();
void protobuf_ShutdownFile_assetdb_2eproto();

class Asset;

enum Asset_AssetType {
  Asset_AssetType_MODEL = 0,
  Asset_AssetType_ANIM = 1,
  Asset_AssetType_MATERIAL = 2
};
bool Asset_AssetType_IsValid(int value);
const Asset_AssetType Asset_AssetType_AssetType_MIN = Asset_AssetType_MODEL;
const Asset_AssetType Asset_AssetType_AssetType_MAX = Asset_AssetType_MATERIAL;
const int Asset_AssetType_AssetType_ARRAYSIZE = Asset_AssetType_AssetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Asset_AssetType_descriptor();
inline const ::std::string& Asset_AssetType_Name(Asset_AssetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Asset_AssetType_descriptor(), value);
}
inline bool Asset_AssetType_Parse(
    const ::std::string& name, Asset_AssetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Asset_AssetType>(
    Asset_AssetType_descriptor(), name, value);
}
// ===================================================================

class Asset : public ::google::protobuf::Message {
 public:
  Asset();
  virtual ~Asset();

  Asset(const Asset& from);

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Asset& default_instance();

  void Swap(Asset* other);

  // implements Message ----------------------------------------------

  Asset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Asset_AssetType AssetType;
  static const AssetType MODEL = Asset_AssetType_MODEL;
  static const AssetType ANIM = Asset_AssetType_ANIM;
  static const AssetType MATERIAL = Asset_AssetType_MATERIAL;
  static inline bool AssetType_IsValid(int value) {
    return Asset_AssetType_IsValid(value);
  }
  static const AssetType AssetType_MIN =
    Asset_AssetType_AssetType_MIN;
  static const AssetType AssetType_MAX =
    Asset_AssetType_AssetType_MAX;
  static const int AssetType_ARRAYSIZE =
    Asset_AssetType_AssetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AssetType_descriptor() {
    return Asset_AssetType_descriptor();
  }
  static inline const ::std::string& AssetType_Name(AssetType value) {
    return Asset_AssetType_Name(value);
  }
  static inline bool AssetType_Parse(const ::std::string& name,
      AssetType* value) {
    return Asset_AssetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .Potato.ProtoBuf.AssetDB.Asset.AssetType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Potato::ProtoBuf::AssetDB::Asset_AssetType type() const;
  inline void set_type(::Potato::ProtoBuf::AssetDB::Asset_AssetType value);

  // @@protoc_insertion_point(class_scope:Potato.ProtoBuf.AssetDB.Asset)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  int type_;
  friend void  protobuf_AddDesc_assetdb_2eproto();
  friend void protobuf_AssignDesc_assetdb_2eproto();
  friend void protobuf_ShutdownFile_assetdb_2eproto();

  void InitAsDefaultInstance();
  static Asset* default_instance_;
};
// ===================================================================


// ===================================================================

// Asset

// required string name = 1;
inline bool Asset::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Asset::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Asset::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Asset::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Asset::name() const {
  // @@protoc_insertion_point(field_get:Potato.ProtoBuf.AssetDB.Asset.name)
  return *name_;
}
inline void Asset::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Potato.ProtoBuf.AssetDB.Asset.name)
}
inline void Asset::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Potato.ProtoBuf.AssetDB.Asset.name)
}
inline void Asset::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Potato.ProtoBuf.AssetDB.Asset.name)
}
inline ::std::string* Asset::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Potato.ProtoBuf.AssetDB.Asset.name)
  return name_;
}
inline ::std::string* Asset::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Asset::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Potato.ProtoBuf.AssetDB.Asset.name)
}

// required int32 id = 2;
inline bool Asset::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Asset::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Asset::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Asset::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Asset::id() const {
  // @@protoc_insertion_point(field_get:Potato.ProtoBuf.AssetDB.Asset.id)
  return id_;
}
inline void Asset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Potato.ProtoBuf.AssetDB.Asset.id)
}

// optional .Potato.ProtoBuf.AssetDB.Asset.AssetType type = 3;
inline bool Asset::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Asset::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Asset::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Asset::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Potato::ProtoBuf::AssetDB::Asset_AssetType Asset::type() const {
  // @@protoc_insertion_point(field_get:Potato.ProtoBuf.AssetDB.Asset.type)
  return static_cast< ::Potato::ProtoBuf::AssetDB::Asset_AssetType >(type_);
}
inline void Asset::set_type(::Potato::ProtoBuf::AssetDB::Asset_AssetType value) {
  assert(::Potato::ProtoBuf::AssetDB::Asset_AssetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Potato.ProtoBuf.AssetDB.Asset.type)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AssetDB
}  // namespace ProtoBuf
}  // namespace Potato

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Potato::ProtoBuf::AssetDB::Asset_AssetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Potato::ProtoBuf::AssetDB::Asset_AssetType>() {
  return ::Potato::ProtoBuf::AssetDB::Asset_AssetType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_assetdb_2eproto__INCLUDED
