// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assetdb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "assetdb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Potato {
namespace ProtoBuf {
namespace AssetDB {

namespace {

const ::google::protobuf::Descriptor* Reponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssetInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConverterInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConverterInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssetExists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetExists_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConverterInfoReqest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConverterInfoReqest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::Potato::ProtoBuf::AssetDB::AddAsset* add_;
  const ::Potato::ProtoBuf::AssetDB::DeleteAsset* del_;
  const ::Potato::ProtoBuf::AssetDB::RenameAsset* rename_;
  const ::Potato::ProtoBuf::AssetDB::UpdateAsset* update_;
  const ::Potato::ProtoBuf::AssetDB::AssetExists* exists_;
  const ::Potato::ProtoBuf::AssetDB::ModInfo* modinfo_;
  const ::Potato::ProtoBuf::AssetDB::ConverterInfoReqest* coninfo_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* AssetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_assetdb_2eproto() {
  protobuf_AddDesc_assetdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "assetdb.proto");
  GOOGLE_CHECK(file != NULL);
  Reponse_descriptor_ = file->message_type(0);
  static const int Reponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reponse, error_),
  };
  Reponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reponse_descriptor_,
      Reponse::default_instance_,
      Reponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reponse));
  AssetInfoResponse_descriptor_ = file->message_type(1);
  static const int AssetInfoResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, modid_),
  };
  AssetInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssetInfoResponse_descriptor_,
      AssetInfoResponse::default_instance_,
      AssetInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssetInfoResponse));
  ModInfoResponse_descriptor_ = file->message_type(2);
  static const int ModInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfoResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfoResponse, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfoResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfoResponse, path_),
  };
  ModInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModInfoResponse_descriptor_,
      ModInfoResponse::default_instance_,
      ModInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModInfoResponse));
  ConverterInfoResponse_descriptor_ = file->message_type(3);
  static const int ConverterInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoResponse, workingdir_),
  };
  ConverterInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConverterInfoResponse_descriptor_,
      ConverterInfoResponse::default_instance_,
      ConverterInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConverterInfoResponse));
  AddAsset_descriptor_ = file->message_type(4);
  static const int AddAsset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAsset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAsset, type_),
  };
  AddAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAsset_descriptor_,
      AddAsset::default_instance_,
      AddAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAsset));
  DeleteAsset_descriptor_ = file->message_type(5);
  static const int DeleteAsset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAsset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAsset, type_),
  };
  DeleteAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteAsset_descriptor_,
      DeleteAsset::default_instance_,
      DeleteAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteAsset));
  RenameAsset_descriptor_ = file->message_type(6);
  static const int RenameAsset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameAsset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameAsset, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameAsset, type_),
  };
  RenameAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameAsset_descriptor_,
      RenameAsset::default_instance_,
      RenameAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameAsset));
  UpdateAsset_descriptor_ = file->message_type(7);
  static const int UpdateAsset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAsset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAsset, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAsset, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAsset, datasize_),
  };
  UpdateAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAsset_descriptor_,
      UpdateAsset::default_instance_,
      UpdateAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAsset));
  AssetExists_descriptor_ = file->message_type(8);
  static const int AssetExists_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetExists, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetExists, type_),
  };
  AssetExists_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssetExists_descriptor_,
      AssetExists::default_instance_,
      AssetExists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetExists, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetExists, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssetExists));
  ModInfo_descriptor_ = file->message_type(9);
  static const int ModInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfo, modid_),
  };
  ModInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModInfo_descriptor_,
      ModInfo::default_instance_,
      ModInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModInfo));
  ConverterInfoReqest_descriptor_ = file->message_type(10);
  static const int ConverterInfoReqest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoReqest, blank_),
  };
  ConverterInfoReqest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConverterInfoReqest_descriptor_,
      ConverterInfoReqest::default_instance_,
      ConverterInfoReqest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoReqest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverterInfoReqest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConverterInfoReqest));
  Request_descriptor_ = file->message_type(11);
  static const int Request_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, add_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, del_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, rename_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, exists_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, modinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, coninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, msg_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  AssetType_descriptor_ = file->enum_type(0);
  Result_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_assetdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reponse_descriptor_, &Reponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssetInfoResponse_descriptor_, &AssetInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModInfoResponse_descriptor_, &ModInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConverterInfoResponse_descriptor_, &ConverterInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAsset_descriptor_, &AddAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteAsset_descriptor_, &DeleteAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameAsset_descriptor_, &RenameAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAsset_descriptor_, &UpdateAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssetExists_descriptor_, &AssetExists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModInfo_descriptor_, &ModInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConverterInfoReqest_descriptor_, &ConverterInfoReqest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_assetdb_2eproto() {
  delete Reponse::default_instance_;
  delete Reponse_reflection_;
  delete AssetInfoResponse::default_instance_;
  delete AssetInfoResponse_reflection_;
  delete ModInfoResponse::default_instance_;
  delete ModInfoResponse_reflection_;
  delete ConverterInfoResponse::default_instance_;
  delete ConverterInfoResponse_reflection_;
  delete AddAsset::default_instance_;
  delete AddAsset_reflection_;
  delete DeleteAsset::default_instance_;
  delete DeleteAsset_reflection_;
  delete RenameAsset::default_instance_;
  delete RenameAsset_reflection_;
  delete UpdateAsset::default_instance_;
  delete UpdateAsset_reflection_;
  delete AssetExists::default_instance_;
  delete AssetExists_reflection_;
  delete ModInfo::default_instance_;
  delete ModInfo_reflection_;
  delete ConverterInfoReqest::default_instance_;
  delete ConverterInfoReqest_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
}

void protobuf_AddDesc_assetdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rassetdb.proto\022\027Potato.ProtoBuf.AssetDB"
    "\"I\n\007Reponse\022/\n\006result\030\001 \002(\0162\037.Potato.Pro"
    "toBuf.AssetDB.Result\022\r\n\005error\030\002 \002(\t\"\256\001\n\021"
    "AssetInfoResponse\022/\n\006result\030\001 \002(\0162\037.Pota"
    "to.ProtoBuf.AssetDB.Result\022\r\n\005error\030\002 \002("
    "\t\022\014\n\004name\030\003 \001(\t\0220\n\004type\030\004 \001(\0162\".Potato.P"
    "rotoBuf.AssetDB.AssetType\022\n\n\002id\030\005 \001(\r\022\r\n"
    "\005modId\030\006 \001(\r\"|\n\017ModInfoResponse\022/\n\006resul"
    "t\030\001 \002(\0162\037.Potato.ProtoBuf.AssetDB.Result"
    "\022\r\n\005error\030\002 \002(\t\022\r\n\005modId\030\003 \001(\r\022\014\n\004name\030\004"
    " \001(\t\022\014\n\004path\030\005 \001(\t\"k\n\025ConverterInfoRespo"
    "nse\022/\n\006result\030\001 \002(\0162\037.Potato.ProtoBuf.As"
    "setDB.Result\022\r\n\005error\030\002 \002(\t\022\022\n\nworkingDi"
    "r\030\003 \001(\t\"J\n\010AddAsset\022\014\n\004name\030\001 \002(\t\0220\n\004typ"
    "e\030\002 \002(\0162\".Potato.ProtoBuf.AssetDB.AssetT"
    "ype\"M\n\013DeleteAsset\022\014\n\004name\030\001 \002(\t\0220\n\004type"
    "\030\002 \002(\0162\".Potato.ProtoBuf.AssetDB.AssetTy"
    "pe\"^\n\013RenameAsset\022\014\n\004name\030\001 \002(\t\022\017\n\007newNa"
    "me\030\002 \002(\t\0220\n\004type\030\003 \002(\0162\".Potato.ProtoBuf"
    ".AssetDB.AssetType\"m\n\013UpdateAsset\022\014\n\004nam"
    "e\030\001 \002(\t\0220\n\004type\030\002 \002(\0162\".Potato.ProtoBuf."
    "AssetDB.AssetType\022\014\n\004args\030\003 \001(\t\022\020\n\010dataS"
    "ize\030\004 \001(\r\"M\n\013AssetExists\022\014\n\004name\030\001 \002(\t\0220"
    "\n\004type\030\002 \002(\0162\".Potato.ProtoBuf.AssetDB.A"
    "ssetType\"\030\n\007ModInfo\022\r\n\005modId\030\001 \002(\r\"$\n\023Co"
    "nverterInfoReqest\022\r\n\005blank\030\001 \001(\r\"\225\003\n\007Req"
    "uest\0220\n\003add\030\001 \001(\0132!.Potato.ProtoBuf.Asse"
    "tDB.AddAssetH\000\0223\n\003del\030\002 \001(\0132$.Potato.Pro"
    "toBuf.AssetDB.DeleteAssetH\000\0226\n\006rename\030\003 "
    "\001(\0132$.Potato.ProtoBuf.AssetDB.RenameAsse"
    "tH\000\0226\n\006update\030\004 \001(\0132$.Potato.ProtoBuf.As"
    "setDB.UpdateAssetH\000\0226\n\006exists\030\005 \001(\0132$.Po"
    "tato.ProtoBuf.AssetDB.AssetExistsH\000\0223\n\007m"
    "odInfo\030\006 \001(\0132 .Potato.ProtoBuf.AssetDB.M"
    "odInfoH\000\022\?\n\007conInfo\030\007 \001(\0132,.Potato.Proto"
    "Buf.AssetDB.ConverterInfoReqestH\000B\005\n\003msg"
    "*7\n\tAssetType\022\t\n\005MODEL\020\001\022\010\n\004ANIM\020\002\022\014\n\010MA"
    "TERIAL\020\003\022\007\n\003IMG\020\004*I\n\006Result\022\006\n\002OK\020\001\022\r\n\tN"
    "OT_FOUND\020\002\022\016\n\nNAME_TAKEN\020\003\022\r\n\tUNCHANGED\020"
    "\004\022\t\n\005ERROR\020\005", 1572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "assetdb.proto", &protobuf_RegisterTypes);
  Reponse::default_instance_ = new Reponse();
  AssetInfoResponse::default_instance_ = new AssetInfoResponse();
  ModInfoResponse::default_instance_ = new ModInfoResponse();
  ConverterInfoResponse::default_instance_ = new ConverterInfoResponse();
  AddAsset::default_instance_ = new AddAsset();
  DeleteAsset::default_instance_ = new DeleteAsset();
  RenameAsset::default_instance_ = new RenameAsset();
  UpdateAsset::default_instance_ = new UpdateAsset();
  AssetExists::default_instance_ = new AssetExists();
  ModInfo::default_instance_ = new ModInfo();
  ConverterInfoReqest::default_instance_ = new ConverterInfoReqest();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance;
  Reponse::default_instance_->InitAsDefaultInstance();
  AssetInfoResponse::default_instance_->InitAsDefaultInstance();
  ModInfoResponse::default_instance_->InitAsDefaultInstance();
  ConverterInfoResponse::default_instance_->InitAsDefaultInstance();
  AddAsset::default_instance_->InitAsDefaultInstance();
  DeleteAsset::default_instance_->InitAsDefaultInstance();
  RenameAsset::default_instance_->InitAsDefaultInstance();
  UpdateAsset::default_instance_->InitAsDefaultInstance();
  AssetExists::default_instance_->InitAsDefaultInstance();
  ModInfo::default_instance_->InitAsDefaultInstance();
  ConverterInfoReqest::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_assetdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_assetdb_2eproto {
  StaticDescriptorInitializer_assetdb_2eproto() {
    protobuf_AddDesc_assetdb_2eproto();
  }
} static_descriptor_initializer_assetdb_2eproto_;
const ::google::protobuf::EnumDescriptor* AssetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetType_descriptor_;
}
bool AssetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}
bool Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Reponse::kResultFieldNumber;
const int Reponse::kErrorFieldNumber;
#endif  // !_MSC_VER

Reponse::Reponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.Reponse)
}

void Reponse::InitAsDefaultInstance() {
}

Reponse::Reponse(const Reponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.Reponse)
}

void Reponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 1;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reponse::~Reponse() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.Reponse)
  SharedDtor();
}

void Reponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void Reponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reponse_descriptor_;
}

const Reponse& Reponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

Reponse* Reponse::default_instance_ = NULL;

Reponse* Reponse::New() const {
  return new Reponse;
}

void Reponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 1;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.Reponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Potato.ProtoBuf.AssetDB.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::Result_IsValid(value)) {
            set_result(static_cast< ::Potato::ProtoBuf::AssetDB::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // required string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.Reponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.Reponse)
  return false;
#undef DO_
}

void Reponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.Reponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.Reponse)
}

::google::protobuf::uint8* Reponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.Reponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.Reponse)
  return target;
}

int Reponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Potato.ProtoBuf.AssetDB.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reponse::MergeFrom(const Reponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reponse::CopyFrom(const Reponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Reponse::Swap(Reponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reponse_descriptor_;
  metadata.reflection = Reponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssetInfoResponse::kResultFieldNumber;
const int AssetInfoResponse::kErrorFieldNumber;
const int AssetInfoResponse::kNameFieldNumber;
const int AssetInfoResponse::kTypeFieldNumber;
const int AssetInfoResponse::kIdFieldNumber;
const int AssetInfoResponse::kModIdFieldNumber;
#endif  // !_MSC_VER

AssetInfoResponse::AssetInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
}

void AssetInfoResponse::InitAsDefaultInstance() {
}

AssetInfoResponse::AssetInfoResponse(const AssetInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
}

void AssetInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 1;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  id_ = 0u;
  modid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssetInfoResponse::~AssetInfoResponse() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
  SharedDtor();
}

void AssetInfoResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AssetInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetInfoResponse_descriptor_;
}

const AssetInfoResponse& AssetInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

AssetInfoResponse* AssetInfoResponse::default_instance_ = NULL;

AssetInfoResponse* AssetInfoResponse::New() const {
  return new AssetInfoResponse;
}

void AssetInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AssetInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, modid_);
    result_ = 1;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssetInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Potato.ProtoBuf.AssetDB.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::Result_IsValid(value)) {
            set_result(static_cast< ::Potato::ProtoBuf::AssetDB::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // required string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Potato.ProtoBuf.AssetDB.AssetType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::AssetType_IsValid(value)) {
            set_type(static_cast< ::Potato::ProtoBuf::AssetDB::AssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint32 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_modId;
        break;
      }

      // optional uint32 modId = 6;
      case 6: {
        if (tag == 48) {
         parse_modId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
  return false;
#undef DO_
}

void AssetInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .Potato.ProtoBuf.AssetDB.AssetType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  // optional uint32 modId = 6;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->modid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
}

::google::protobuf::uint8* AssetInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .Potato.ProtoBuf.AssetDB.AssetType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  // optional uint32 modId = 6;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->modid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.AssetInfoResponse)
  return target;
}

int AssetInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Potato.ProtoBuf.AssetDB.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Potato.ProtoBuf.AssetDB.AssetType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 modId = 6;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssetInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssetInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssetInfoResponse::MergeFrom(const AssetInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssetInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetInfoResponse::CopyFrom(const AssetInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AssetInfoResponse::Swap(AssetInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(modid_, other->modid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssetInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetInfoResponse_descriptor_;
  metadata.reflection = AssetInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModInfoResponse::kResultFieldNumber;
const int ModInfoResponse::kErrorFieldNumber;
const int ModInfoResponse::kModIdFieldNumber;
const int ModInfoResponse::kNameFieldNumber;
const int ModInfoResponse::kPathFieldNumber;
#endif  // !_MSC_VER

ModInfoResponse::ModInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.ModInfoResponse)
}

void ModInfoResponse::InitAsDefaultInstance() {
}

ModInfoResponse::ModInfoResponse(const ModInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.ModInfoResponse)
}

void ModInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 1;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModInfoResponse::~ModInfoResponse() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.ModInfoResponse)
  SharedDtor();
}

void ModInfoResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ModInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModInfoResponse_descriptor_;
}

const ModInfoResponse& ModInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

ModInfoResponse* ModInfoResponse::default_instance_ = NULL;

ModInfoResponse* ModInfoResponse::New() const {
  return new ModInfoResponse;
}

void ModInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    result_ = 1;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    modid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.ModInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Potato.ProtoBuf.AssetDB.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::Result_IsValid(value)) {
            set_result(static_cast< ::Potato::ProtoBuf::AssetDB::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // required string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_modId;
        break;
      }

      // optional uint32 modId = 3;
      case 3: {
        if (tag == 24) {
         parse_modId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // optional string path = 5;
      case 5: {
        if (tag == 42) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.ModInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.ModInfoResponse)
  return false;
#undef DO_
}

void ModInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.ModInfoResponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional uint32 modId = 3;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.ModInfoResponse)
}

::google::protobuf::uint8* ModInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.ModInfoResponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional uint32 modId = 3;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.ModInfoResponse)
  return target;
}

int ModInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Potato.ProtoBuf.AssetDB.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional uint32 modId = 3;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModInfoResponse::MergeFrom(const ModInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModInfoResponse::CopyFrom(const ModInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModInfoResponse::Swap(ModInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(modid_, other->modid_);
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModInfoResponse_descriptor_;
  metadata.reflection = ModInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConverterInfoResponse::kResultFieldNumber;
const int ConverterInfoResponse::kErrorFieldNumber;
const int ConverterInfoResponse::kWorkingDirFieldNumber;
#endif  // !_MSC_VER

ConverterInfoResponse::ConverterInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
}

void ConverterInfoResponse::InitAsDefaultInstance() {
}

ConverterInfoResponse::ConverterInfoResponse(const ConverterInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
}

void ConverterInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 1;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workingdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConverterInfoResponse::~ConverterInfoResponse() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
  SharedDtor();
}

void ConverterInfoResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (workingdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workingdir_;
  }
  if (this != default_instance_) {
  }
}

void ConverterInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverterInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConverterInfoResponse_descriptor_;
}

const ConverterInfoResponse& ConverterInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

ConverterInfoResponse* ConverterInfoResponse::default_instance_ = NULL;

ConverterInfoResponse* ConverterInfoResponse::New() const {
  return new ConverterInfoResponse;
}

void ConverterInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 1;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    if (has_workingdir()) {
      if (workingdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        workingdir_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConverterInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Potato.ProtoBuf.AssetDB.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::Result_IsValid(value)) {
            set_result(static_cast< ::Potato::ProtoBuf::AssetDB::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // required string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_workingDir;
        break;
      }

      // optional string workingDir = 3;
      case 3: {
        if (tag == 26) {
         parse_workingDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workingdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workingdir().data(), this->workingdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "workingdir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
  return false;
#undef DO_
}

void ConverterInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional string workingDir = 3;
  if (has_workingdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workingdir().data(), this->workingdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workingdir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->workingdir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
}

::google::protobuf::uint8* ConverterInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
  // required .Potato.ProtoBuf.AssetDB.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional string workingDir = 3;
  if (has_workingdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workingdir().data(), this->workingdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workingdir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->workingdir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.ConverterInfoResponse)
  return target;
}

int ConverterInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Potato.ProtoBuf.AssetDB.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional string workingDir = 3;
    if (has_workingdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workingdir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverterInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConverterInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConverterInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConverterInfoResponse::MergeFrom(const ConverterInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_workingdir()) {
      set_workingdir(from.workingdir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConverterInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverterInfoResponse::CopyFrom(const ConverterInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverterInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConverterInfoResponse::Swap(ConverterInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_, other->error_);
    std::swap(workingdir_, other->workingdir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConverterInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConverterInfoResponse_descriptor_;
  metadata.reflection = ConverterInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAsset::kNameFieldNumber;
const int AddAsset::kTypeFieldNumber;
#endif  // !_MSC_VER

AddAsset::AddAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.AddAsset)
}

void AddAsset::InitAsDefaultInstance() {
}

AddAsset::AddAsset(const AddAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.AddAsset)
}

void AddAsset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAsset::~AddAsset() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.AddAsset)
  SharedDtor();
}

void AddAsset::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AddAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAsset_descriptor_;
}

const AddAsset& AddAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

AddAsset* AddAsset::default_instance_ = NULL;

AddAsset* AddAsset::New() const {
  return new AddAsset;
}

void AddAsset::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.AddAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::AssetType_IsValid(value)) {
            set_type(static_cast< ::Potato::ProtoBuf::AssetDB::AssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.AddAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.AddAsset)
  return false;
#undef DO_
}

void AddAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.AddAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.AddAsset)
}

::google::protobuf::uint8* AddAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.AddAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.AddAsset)
  return target;
}

int AddAsset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAsset::MergeFrom(const AddAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAsset::CopyFrom(const AddAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddAsset::Swap(AddAsset* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAsset_descriptor_;
  metadata.reflection = AddAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteAsset::kNameFieldNumber;
const int DeleteAsset::kTypeFieldNumber;
#endif  // !_MSC_VER

DeleteAsset::DeleteAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.DeleteAsset)
}

void DeleteAsset::InitAsDefaultInstance() {
}

DeleteAsset::DeleteAsset(const DeleteAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.DeleteAsset)
}

void DeleteAsset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteAsset::~DeleteAsset() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.DeleteAsset)
  SharedDtor();
}

void DeleteAsset::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DeleteAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteAsset_descriptor_;
}

const DeleteAsset& DeleteAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

DeleteAsset* DeleteAsset::default_instance_ = NULL;

DeleteAsset* DeleteAsset::New() const {
  return new DeleteAsset;
}

void DeleteAsset::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.DeleteAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::AssetType_IsValid(value)) {
            set_type(static_cast< ::Potato::ProtoBuf::AssetDB::AssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.DeleteAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.DeleteAsset)
  return false;
#undef DO_
}

void DeleteAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.DeleteAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.DeleteAsset)
}

::google::protobuf::uint8* DeleteAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.DeleteAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.DeleteAsset)
  return target;
}

int DeleteAsset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteAsset::MergeFrom(const DeleteAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAsset::CopyFrom(const DeleteAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteAsset::Swap(DeleteAsset* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteAsset_descriptor_;
  metadata.reflection = DeleteAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameAsset::kNameFieldNumber;
const int RenameAsset::kNewNameFieldNumber;
const int RenameAsset::kTypeFieldNumber;
#endif  // !_MSC_VER

RenameAsset::RenameAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.RenameAsset)
}

void RenameAsset::InitAsDefaultInstance() {
}

RenameAsset::RenameAsset(const RenameAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.RenameAsset)
}

void RenameAsset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameAsset::~RenameAsset() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.RenameAsset)
  SharedDtor();
}

void RenameAsset::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void RenameAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameAsset_descriptor_;
}

const RenameAsset& RenameAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

RenameAsset* RenameAsset::default_instance_ = NULL;

RenameAsset* RenameAsset::New() const {
  return new RenameAsset;
}

void RenameAsset::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.RenameAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newName;
        break;
      }

      // required string newName = 2;
      case 2: {
        if (tag == 18) {
         parse_newName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .Potato.ProtoBuf.AssetDB.AssetType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::AssetType_IsValid(value)) {
            set_type(static_cast< ::Potato::ProtoBuf::AssetDB::AssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.RenameAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.RenameAsset)
  return false;
#undef DO_
}

void RenameAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.RenameAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string newName = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newname(), output);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.RenameAsset)
}

::google::protobuf::uint8* RenameAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.RenameAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string newName = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.RenameAsset)
  return target;
}

int RenameAsset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string newName = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // required .Potato.ProtoBuf.AssetDB.AssetType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameAsset::MergeFrom(const RenameAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameAsset::CopyFrom(const RenameAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RenameAsset::Swap(RenameAsset* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(newname_, other->newname_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameAsset_descriptor_;
  metadata.reflection = RenameAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAsset::kNameFieldNumber;
const int UpdateAsset::kTypeFieldNumber;
const int UpdateAsset::kArgsFieldNumber;
const int UpdateAsset::kDataSizeFieldNumber;
#endif  // !_MSC_VER

UpdateAsset::UpdateAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.UpdateAsset)
}

void UpdateAsset::InitAsDefaultInstance() {
}

UpdateAsset::UpdateAsset(const UpdateAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.UpdateAsset)
}

void UpdateAsset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datasize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAsset::~UpdateAsset() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.UpdateAsset)
  SharedDtor();
}

void UpdateAsset::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void UpdateAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAsset_descriptor_;
}

const UpdateAsset& UpdateAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

UpdateAsset* UpdateAsset::default_instance_ = NULL;

UpdateAsset* UpdateAsset::New() const {
  return new UpdateAsset;
}

void UpdateAsset::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
    datasize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.UpdateAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::AssetType_IsValid(value)) {
            set_type(static_cast< ::Potato::ProtoBuf::AssetDB::AssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // optional string args = 3;
      case 3: {
        if (tag == 26) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 4;
      case 4: {
        if (tag == 32) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.UpdateAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.UpdateAsset)
  return false;
#undef DO_
}

void UpdateAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.UpdateAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string args = 3;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->args(), output);
  }

  // optional uint32 dataSize = 4;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->datasize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.UpdateAsset)
}

::google::protobuf::uint8* UpdateAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.UpdateAsset)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string args = 3;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->args(), target);
  }

  // optional uint32 dataSize = 4;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->datasize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.UpdateAsset)
  return target;
}

int UpdateAsset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string args = 3;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

    // optional uint32 dataSize = 4;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAsset::MergeFrom(const UpdateAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAsset::CopyFrom(const UpdateAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateAsset::Swap(UpdateAsset* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(args_, other->args_);
    std::swap(datasize_, other->datasize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAsset_descriptor_;
  metadata.reflection = UpdateAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssetExists::kNameFieldNumber;
const int AssetExists::kTypeFieldNumber;
#endif  // !_MSC_VER

AssetExists::AssetExists()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.AssetExists)
}

void AssetExists::InitAsDefaultInstance() {
}

AssetExists::AssetExists(const AssetExists& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.AssetExists)
}

void AssetExists::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssetExists::~AssetExists() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.AssetExists)
  SharedDtor();
}

void AssetExists::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AssetExists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetExists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetExists_descriptor_;
}

const AssetExists& AssetExists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

AssetExists* AssetExists::default_instance_ = NULL;

AssetExists* AssetExists::New() const {
  return new AssetExists;
}

void AssetExists::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssetExists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.AssetExists)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Potato::ProtoBuf::AssetDB::AssetType_IsValid(value)) {
            set_type(static_cast< ::Potato::ProtoBuf::AssetDB::AssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.AssetExists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.AssetExists)
  return false;
#undef DO_
}

void AssetExists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.AssetExists)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.AssetExists)
}

::google::protobuf::uint8* AssetExists::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.AssetExists)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.AssetExists)
  return target;
}

int AssetExists::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Potato.ProtoBuf.AssetDB.AssetType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetExists::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssetExists* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssetExists*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssetExists::MergeFrom(const AssetExists& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssetExists::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetExists::CopyFrom(const AssetExists& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetExists::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AssetExists::Swap(AssetExists* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssetExists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetExists_descriptor_;
  metadata.reflection = AssetExists_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModInfo::kModIdFieldNumber;
#endif  // !_MSC_VER

ModInfo::ModInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.ModInfo)
}

void ModInfo::InitAsDefaultInstance() {
}

ModInfo::ModInfo(const ModInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.ModInfo)
}

void ModInfo::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModInfo::~ModInfo() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.ModInfo)
  SharedDtor();
}

void ModInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModInfo_descriptor_;
}

const ModInfo& ModInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

ModInfo* ModInfo::default_instance_ = NULL;

ModInfo* ModInfo::New() const {
  return new ModInfo;
}

void ModInfo::Clear() {
  modid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.ModInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 modId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.ModInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.ModInfo)
  return false;
#undef DO_
}

void ModInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.ModInfo)
  // required uint32 modId = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.ModInfo)
}

::google::protobuf::uint8* ModInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.ModInfo)
  // required uint32 modId = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.ModInfo)
  return target;
}

int ModInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 modId = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModInfo::MergeFrom(const ModInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModInfo::CopyFrom(const ModInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ModInfo::Swap(ModInfo* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModInfo_descriptor_;
  metadata.reflection = ModInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConverterInfoReqest::kBlankFieldNumber;
#endif  // !_MSC_VER

ConverterInfoReqest::ConverterInfoReqest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
}

void ConverterInfoReqest::InitAsDefaultInstance() {
}

ConverterInfoReqest::ConverterInfoReqest(const ConverterInfoReqest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
}

void ConverterInfoReqest::SharedCtor() {
  _cached_size_ = 0;
  blank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConverterInfoReqest::~ConverterInfoReqest() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
  SharedDtor();
}

void ConverterInfoReqest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConverterInfoReqest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverterInfoReqest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConverterInfoReqest_descriptor_;
}

const ConverterInfoReqest& ConverterInfoReqest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

ConverterInfoReqest* ConverterInfoReqest::default_instance_ = NULL;

ConverterInfoReqest* ConverterInfoReqest::New() const {
  return new ConverterInfoReqest;
}

void ConverterInfoReqest::Clear() {
  blank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConverterInfoReqest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 blank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blank_)));
          set_has_blank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
  return false;
#undef DO_
}

void ConverterInfoReqest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
  // optional uint32 blank = 1;
  if (has_blank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->blank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
}

::google::protobuf::uint8* ConverterInfoReqest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
  // optional uint32 blank = 1;
  if (has_blank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->blank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.ConverterInfoReqest)
  return target;
}

int ConverterInfoReqest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 blank = 1;
    if (has_blank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverterInfoReqest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConverterInfoReqest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConverterInfoReqest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConverterInfoReqest::MergeFrom(const ConverterInfoReqest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blank()) {
      set_blank(from.blank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConverterInfoReqest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverterInfoReqest::CopyFrom(const ConverterInfoReqest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverterInfoReqest::IsInitialized() const {

  return true;
}

void ConverterInfoReqest::Swap(ConverterInfoReqest* other) {
  if (other != this) {
    std::swap(blank_, other->blank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConverterInfoReqest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConverterInfoReqest_descriptor_;
  metadata.reflection = ConverterInfoReqest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kAddFieldNumber;
const int Request::kDelFieldNumber;
const int Request::kRenameFieldNumber;
const int Request::kUpdateFieldNumber;
const int Request::kExistsFieldNumber;
const int Request::kModInfoFieldNumber;
const int Request::kConInfoFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Potato.ProtoBuf.AssetDB.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->add_ = const_cast< ::Potato::ProtoBuf::AssetDB::AddAsset*>(&::Potato::ProtoBuf::AssetDB::AddAsset::default_instance());
  Request_default_oneof_instance_->del_ = const_cast< ::Potato::ProtoBuf::AssetDB::DeleteAsset*>(&::Potato::ProtoBuf::AssetDB::DeleteAsset::default_instance());
  Request_default_oneof_instance_->rename_ = const_cast< ::Potato::ProtoBuf::AssetDB::RenameAsset*>(&::Potato::ProtoBuf::AssetDB::RenameAsset::default_instance());
  Request_default_oneof_instance_->update_ = const_cast< ::Potato::ProtoBuf::AssetDB::UpdateAsset*>(&::Potato::ProtoBuf::AssetDB::UpdateAsset::default_instance());
  Request_default_oneof_instance_->exists_ = const_cast< ::Potato::ProtoBuf::AssetDB::AssetExists*>(&::Potato::ProtoBuf::AssetDB::AssetExists::default_instance());
  Request_default_oneof_instance_->modinfo_ = const_cast< ::Potato::ProtoBuf::AssetDB::ModInfo*>(&::Potato::ProtoBuf::AssetDB::ModInfo::default_instance());
  Request_default_oneof_instance_->coninfo_ = const_cast< ::Potato::ProtoBuf::AssetDB::ConverterInfoReqest*>(&::Potato::ProtoBuf::AssetDB::ConverterInfoReqest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Potato.ProtoBuf.AssetDB.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msg();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Potato.ProtoBuf.AssetDB.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assetdb_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::clear_msg() {
  switch(msg_case()) {
    case kAdd: {
      delete msg_.add_;
      break;
    }
    case kDel: {
      delete msg_.del_;
      break;
    }
    case kRename: {
      delete msg_.rename_;
      break;
    }
    case kUpdate: {
      delete msg_.update_;
      break;
    }
    case kExists: {
      delete msg_.exists_;
      break;
    }
    case kModInfo: {
      delete msg_.modinfo_;
      break;
    }
    case kConInfo: {
      delete msg_.coninfo_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Request::Clear() {
  clear_msg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Potato.ProtoBuf.AssetDB.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Potato.ProtoBuf.AssetDB.AddAsset add = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_del;
        break;
      }

      // optional .Potato.ProtoBuf.AssetDB.DeleteAsset del = 2;
      case 2: {
        if (tag == 18) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rename;
        break;
      }

      // optional .Potato.ProtoBuf.AssetDB.RenameAsset rename = 3;
      case 3: {
        if (tag == 26) {
         parse_rename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_update;
        break;
      }

      // optional .Potato.ProtoBuf.AssetDB.UpdateAsset update = 4;
      case 4: {
        if (tag == 34) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exists;
        break;
      }

      // optional .Potato.ProtoBuf.AssetDB.AssetExists exists = 5;
      case 5: {
        if (tag == 42) {
         parse_exists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_modInfo;
        break;
      }

      // optional .Potato.ProtoBuf.AssetDB.ModInfo modInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_modInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_conInfo;
        break;
      }

      // optional .Potato.ProtoBuf.AssetDB.ConverterInfoReqest conInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_conInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Potato.ProtoBuf.AssetDB.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Potato.ProtoBuf.AssetDB.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Potato.ProtoBuf.AssetDB.Request)
  // optional .Potato.ProtoBuf.AssetDB.AddAsset add = 1;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->add(), output);
  }

  // optional .Potato.ProtoBuf.AssetDB.DeleteAsset del = 2;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->del(), output);
  }

  // optional .Potato.ProtoBuf.AssetDB.RenameAsset rename = 3;
  if (has_rename()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rename(), output);
  }

  // optional .Potato.ProtoBuf.AssetDB.UpdateAsset update = 4;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->update(), output);
  }

  // optional .Potato.ProtoBuf.AssetDB.AssetExists exists = 5;
  if (has_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exists(), output);
  }

  // optional .Potato.ProtoBuf.AssetDB.ModInfo modInfo = 6;
  if (has_modinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->modinfo(), output);
  }

  // optional .Potato.ProtoBuf.AssetDB.ConverterInfoReqest conInfo = 7;
  if (has_coninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->coninfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Potato.ProtoBuf.AssetDB.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Potato.ProtoBuf.AssetDB.Request)
  // optional .Potato.ProtoBuf.AssetDB.AddAsset add = 1;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->add(), target);
  }

  // optional .Potato.ProtoBuf.AssetDB.DeleteAsset del = 2;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->del(), target);
  }

  // optional .Potato.ProtoBuf.AssetDB.RenameAsset rename = 3;
  if (has_rename()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rename(), target);
  }

  // optional .Potato.ProtoBuf.AssetDB.UpdateAsset update = 4;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->update(), target);
  }

  // optional .Potato.ProtoBuf.AssetDB.AssetExists exists = 5;
  if (has_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->exists(), target);
  }

  // optional .Potato.ProtoBuf.AssetDB.ModInfo modInfo = 6;
  if (has_modinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->modinfo(), target);
  }

  // optional .Potato.ProtoBuf.AssetDB.ConverterInfoReqest conInfo = 7;
  if (has_coninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->coninfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Potato.ProtoBuf.AssetDB.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  switch (msg_case()) {
    // optional .Potato.ProtoBuf.AssetDB.AddAsset add = 1;
    case kAdd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add());
      break;
    }
    // optional .Potato.ProtoBuf.AssetDB.DeleteAsset del = 2;
    case kDel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
      break;
    }
    // optional .Potato.ProtoBuf.AssetDB.RenameAsset rename = 3;
    case kRename: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rename());
      break;
    }
    // optional .Potato.ProtoBuf.AssetDB.UpdateAsset update = 4;
    case kUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
      break;
    }
    // optional .Potato.ProtoBuf.AssetDB.AssetExists exists = 5;
    case kExists: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exists());
      break;
    }
    // optional .Potato.ProtoBuf.AssetDB.ModInfo modInfo = 6;
    case kModInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modinfo());
      break;
    }
    // optional .Potato.ProtoBuf.AssetDB.ConverterInfoReqest conInfo = 7;
    case kConInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coninfo());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.msg_case()) {
    case kAdd: {
      mutable_add()->::Potato::ProtoBuf::AssetDB::AddAsset::MergeFrom(from.add());
      break;
    }
    case kDel: {
      mutable_del()->::Potato::ProtoBuf::AssetDB::DeleteAsset::MergeFrom(from.del());
      break;
    }
    case kRename: {
      mutable_rename()->::Potato::ProtoBuf::AssetDB::RenameAsset::MergeFrom(from.rename());
      break;
    }
    case kUpdate: {
      mutable_update()->::Potato::ProtoBuf::AssetDB::UpdateAsset::MergeFrom(from.update());
      break;
    }
    case kExists: {
      mutable_exists()->::Potato::ProtoBuf::AssetDB::AssetExists::MergeFrom(from.exists());
      break;
    }
    case kModInfo: {
      mutable_modinfo()->::Potato::ProtoBuf::AssetDB::ModInfo::MergeFrom(from.modinfo());
      break;
    }
    case kConInfo: {
      mutable_coninfo()->::Potato::ProtoBuf::AssetDB::ConverterInfoReqest::MergeFrom(from.coninfo());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_add()) {
    if (!this->add().IsInitialized()) return false;
  }
  if (has_del()) {
    if (!this->del().IsInitialized()) return false;
  }
  if (has_rename()) {
    if (!this->rename().IsInitialized()) return false;
  }
  if (has_update()) {
    if (!this->update().IsInitialized()) return false;
  }
  if (has_exists()) {
    if (!this->exists().IsInitialized()) return false;
  }
  if (has_modinfo()) {
    if (!this->modinfo().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AssetDB
}  // namespace ProtoBuf
}  // namespace Potato

// @@protoc_insertion_point(global_scope)
