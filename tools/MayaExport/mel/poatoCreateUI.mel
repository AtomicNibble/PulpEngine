// ==========================
// Potato - Model Exporter (UIScript)
// Version: 1.2 (add in anim tab)
// Version with just model stuff: 3c75e0c18985a3eea6c06e1d0b6d10fa0d07e7ef
// site: tom-crowley.co.uk
// Copyright: Tom Crowley 2014
// ==========================

global proc print_Error(string $msg) {
	error $msg;
}

global proc print_Warn(string $msg) {
	warning $msg;
}

global proc print_Msg(string $msg) {
	print($msg + "\n");
}

global proc potato_revealSelected()
{
	outlinerEditor -edit -showSelected  1 outlinerPanel1;
}

global proc potato_SelectAndRevealType(string $type)
{
	string $selected[] = `ls -type $type`;
	select -r $selected;

	potato_revealSelected();
}

global proc potato_SelectAllBonesInScene()
{
	potato_SelectAndRevealType("joint");
}

global proc potato_SelectAllMeshInScene()
{
	potato_SelectAndRevealType("mesh");
}


global proc int assetDB_add(string $type, string $name)
{
	if(getExportMode() == "Raw") { // don't ask db in raw mode.
		return 0;
	}

	string $command = "PotatoAssetDB -action add -type " + $type + " -name \"" + $name + "\"";
	string $errorMsg;
	$error = catch ( $errorMsg = eval( $command ) );

	if($error == "0" && $errorMsg == "ok") {
		return 0;
	}
	confirmDialog -title "Falied to add" -message ("Can't add asset \"" + $name + "\". Error: " + $errorMsg)
		-button "Ok" -defaultButton "Ok";
	return -1;
}

global proc int assetDB_rename(string $type, string $old_name, string $newName)
{
	if(getExportMode() == "Raw") { // don't ask db in raw mode.
		return 0;
	}

	string $command = "PotatoAssetDB -action rename -type " + $type + " -old_name \"" + $old_name + "\" -name \"" +$newName + "\" ";
	string $errorMsg;
	$error = catch ( $errorMsg = eval( $command ) );

	if($error == "0" && $errorMsg == "ok") {
		return 0;
	}

	confirmDialog -title "Falied to rename" -message ("Can't rename \"" + $old_name + "\" to \"" + $newName + "\". Error: " + $errorMsg)
		-button "Ok" -defaultButton "Ok";
	return -1;
}

global proc int assetDB_remove(string $type, string $name)
{
	if(getExportMode() == "Raw") { // don't ask db in raw mode.
		return 0;
	}

	string $command = "PotatoAssetDB -action remove -type " + $type + " -name \"" + $name + "\"";
	string $errorMsg;
	$error = catch ( $errorMsg = eval( $command ) );

	if($error == "0" && $errorMsg == "ok") {
		return 0;
	}
	confirmDialog -title "Falied to delete" -message ("Can't delete asset \"" + $name + "\". Error: " + $errorMsg)
		-button "Ok" -defaultButton "Ok";
	return -1;
}


global proc savePathGlobal(string $pathId, string $value)
{
	saveSettingGlobal($pathId, $value);
}

global proc string loadPathGlobal(string $pathId)
{
	return loadSettingGlobal($pathId);
}

global proc saveSettingGlobal(string $setId, string $value)
{
	string $command = "PotatoSettings -set -set_id " + $setId + " -value \"" + $value + "\"";
	string $errorMsg;
	$error = catch ( $errorMsg = eval( $command ) );
}

global proc string loadSettingGlobal(string $setId)
{
	string $command = "PotatoSettings -get -set_id " + $setId;
	return eval( $command );
}

global proc int dirSelectedCallBck(string $dirpath,string $type)
{
	unlockPotatoNode();
		print_Msg("selected directory(model): " + $dirpath);
		string $res = `textFieldButtonGrp -e -fi $dirpath pathsOutputDir`;
		setAttr -type "string" ("PotatoGNode.outputDir") $dirpath;
	lockPotatoNode();

	// set global value.
	savePathGlobal("modelOut", $dirpath);
	return 1;
}

global proc int dirSelectedCallBck_anim(string $dirpath,string $type)
{
	unlockPotatoNode();
		print_Msg("selected directory(anim): " + $dirpath);
		string $res = `textFieldButtonGrp -e -fi $dirpath pathsAnimOutputDir`;
		setAttr -type "string" ("PotatoGNode.outputDirAnims") $dirpath;
	lockPotatoNode();

	// set global value.
	savePathGlobal("animOut", $dirpath);
	return 1;
}

global proc browseForDir() {
	fileBrowser( "dirSelectedCallBck", "Select a Folder (Model Out)", "", 4 );
}

global proc browseForDir_anim() {
	fileBrowser( "dirSelectedCallBck_anim", "Select a Folder (Anim Out)", "", 4 );
}

global proc string getOutputDir() {
  	return loadPathGlobal("modelOut");
}

global proc string getOutputDirAnims() {
  	return loadPathGlobal("animOut");
}

global proc string getExportMode() {
  	string $exportMode = loadSettingGlobal("exportMode");
	if(int(`size $exportMode`) < 1) {
		return "server";
	}

	if($exportMode == "RawModel") {
		$exportMode = "Raw";
	}

  	return $exportMode;
}

global proc string modelGetName(int $index) {
	return `textFieldGrp -q -fi ("modelName" + $index)`;
}

global proc int modelIsLODIncluded(int $lod_number, int $index) {
	return `checkBox -q -v ("ModelIncludeLod" + $lod_number + $index )`;
}

global proc float modelGetLODDistance(int $lod_number, int $index) {
	return `floatField -q -v ("ModelIncludeLod" + $lod_number + $index )`;
}

global proc ModelEntryNameChanged(int $index)
{
	string $name = `textFieldGrp -q -fi ("modelName" + $index)`;
	string $nameOld = `getAttr ("PotatoGNode.ModelName" + $index)`;

	if(assetDB_rename("model", $nameOld, $name) != 0) {
		// reset the name
 		textFieldGrp -e -fi $nameOld ("modelName" + $index);
		return;
	}

	frameLayout -e -l $name ("exportFrame" + $index);

	// node needs updating
	setAttr -type "string" ("PotatoGNode.ModelName" + $index) $name;
}

global proc ModelEntryLODIncludeChanged(int $lod_number, int $index)
{
	int $checked = modelIsLODIncluded($lod_number, $index);

	print_Msg("test: " + $checked);
	setAttr ("PotatoGNode.Export" + $index + $lod_number) $checked;
}

global proc ModelSetLODDistance(int $lod_number, int $index)
{
	float $dis = modelGetLODDistance($lod_number, $index);
	setAttr ("PotatoGNode.Distance" + $index + $lod_number) $dis;
}

global proc mergeMeshUpdate()
{
	int $val = `checkBoxGrp -q -v1 mergeMeshCntrl`;
	setAttr ("PotatoGNode.mergeMesh") $val;
}

global proc mergeVertsUpdate()
{
	int $val = `checkBoxGrp -q -v1 mergeVertsCntrl`;
	setAttr ("PotatoGNode.mergeVerts") $val;
}

global proc ScaleUpdate()
{
	float $val = `floatFieldGrp -q -v1 ScaleCntrl`;
	setAttr ("PotatoGNode.scale") $val;
}

global proc weightThresholdUpdate()
{
	float $val = `floatSliderGrp -q -v weightThreshCntl`;
	setAttr ("PotatoGNode.weightThreshold") $val;
}

global proc uvMergeThresholdUpdate()
{
	float $val = `floatSliderGrp -q -v uvMergeThreshCntl`;
	setAttr ("PotatoGNode.uvMergeThreshold") $val;
}

global proc vertMergeThresholdUpdate()
{
	float $val = `floatSliderGrp -q -v vertMergeThreshCntl`;
	setAttr ("PotatoGNode.vertMergeThreshold") $val;
}

global proc zeroOutOriginUpdate()
{
	int $val = `checkBoxGrp -q -v1 zeroOriginCntrl`;
	setAttr ("PotatoGNode.zeroOrigin") $val;
}

global proc verboseUpdate()
{
	int $val = `checkBoxGrp -q -v1 verboseCntrl`;
	setAttr ("PotatoGNode.verbose") $val;
}

global proc exportModeUpdate()
{
	string $val = `optionMenuGrp -q -v exportModeCntrl`;

	saveSettingGlobal("exportMode", $val);
}

global proc forceBoneFiltersUpdate()
{
	string $val = `scrollField -q -tx forceBoneFiltersCntrl`;
	setAttr ("PotatoGNode.forceBoneFilters") -type "string" $val;
}

global proc ModelSetLODObjects_internal(int $lod_number, int $index, string $Selected[])
{
	string $valid_str = "";
 	string $valid[];

  // filters out all the non-polymesh nodes
	$Selected = `filterExpand -sm 12 $Selected`;

	for($obj in $Selected)
	{
		int $objTest = `objExists $obj` ;
		if($objTest)
		{
			$valid_str = $valid_str + $obj + " ";
			$valid[size($valid)] = $obj;
		}
		else
		{
			print_Warn($obj + " does not exsists removing from object list");
		}
	}

//	print_Warn(stringArrayToString($valid, " "));

	if (`size $valid`)
	{
		int $num = size($valid);
		int $info[] = (`polyEvaluate -v -t $valid`);

		text -e -l $num ("ModelInfoNum" + $lod_number + $index );
		text -e -l $info[0] ("ModelInfoVerts" + $lod_number + $index );
		text -e -l $info[1] ("ModelInfoFaces" + $lod_number + $index );

		setAttr -type "string" ("PotatoGNode.ObjectList" + $index + $lod_number) $valid_str;
	}
}

global proc ModelSetLODObjects(int $lod_number, int $index)
{
	string $Selected[] = `ls -sl`;

	if (`size $Selected`)
		ModelSetLODObjects_internal($lod_number, $index, $Selected);
	else
		print_Warn("unable to set lod objects: no meshes are selected.");
}

global proc ModelSelectLODObjects(int $lod_number, int $index)
{
	// get rekt.
	string $objects = `getAttr ("PotatoGNode.ObjectList" + $index + $lod_number)`;
	string $objectsArray[];

	string $validObjects;
	string $deletedObjects;

	int $idx;
	int $num = `tokenize $objects " " $objectsArray`;

	if ( $num > 1 ) {
		for ( $idx = 0; $idx < $num; $idx++ ) {
			if( `objExists $objectsArray[$idx]` )
				$validObjects += $objectsArray[$idx] + " ";
			else
				$deletedObjects += $objectsArray[$idx] + " ";
		}
	} else {
		$validObjects = $objects;
	}

	$res = ("select -r " + $validObjects);
	eval $res;


	if ( $deletedObjects != "" )
	{
		// objects added previously no longer exsist.

	}
}

global proc ModelClearLODObjects(int $lod_number, int $index)
{
	text -e -l "0" ("ModelInfoNum" + $lod_number + $index );
	text -e -l "0" ("ModelInfoVerts" + $lod_number + $index );
	text -e -l "0" ("ModelInfoFaces" + $lod_number + $index );

	setAttr -type "string" ("PotatoGNode.ObjectList" + $index + $lod_number) "";

	print_Msg( "'" + modelGetName($index) + "' LOD" + $lod_number + " was cleared.");
}

global proc potato_ExportAll()
{
	int $numModels = `getAttr PotatoGNode.numModels`;
	int $i;
	for($i = 0; $i < $numModels; $i++)
		ModelEntryExport($i);
}

global proc ModelEntryExport(int $index)
{
	string $args;
	string $lod_objects[];
	int $lod_inc[];
	int $lod_distance[];
	int $total_lods = 0;
	int $total_mesh = 0;
	int $idx;

	for($idx = 0; $idx < 4; $idx++)
	{
		$lod_inc[size($lod_inc)] = `getAttr ("PotatoGNode.Export" + $index + $idx)`;
		$lod_distance[size($lod_distance)]= `getAttr ("PotatoGNode.Distance" + $index + $idx)`;
		$lod_objects[size($lod_objects)]= `getAttr ("PotatoGNode.ObjectList" + $index + $idx)`;

		$total_lods += $lod_inc[$idx];
	}

/*	print_Msg("===============");
	print_Msg("NumLods: " + $total_lods);

	for($idx = 0; $idx < 4; $idx++)
	{
		print_Msg( "Inc: " + $lod_inc[$idx] );
		print_Msg( "Distance: " + $lod_distance[$idx] );
		print_Msg( "Objects: " + $lod_objects[$idx] );
		print_Msg("");
	}*/

	// any lods?
	if($total_lods < 1) {
		print_Error("Can't export model: '"+ modelGetName($index) + "' has no lods included.");
		return;
	}

	// check we have atleast one mesh and build the args.
	for($idx = 0; $idx < 4; $idx++)
	{
		if($lod_inc[$idx] != 0) {
			string $tokens[];
			int $num = 0;

			if(size($lod_objects[$idx]) > 0) {
				$num = `tokenize $lod_objects[$idx] " " $tokens`;
				$total_mesh += $num;
			}

			if($num < 1) { // warn about it, instead of cancel export as we can just not include this lod :)
				print_Warn("LOD" + $idx + " has no meshes defined");
				$lod_inc[$idx] = 0;
				$total_lods--;
				continue;
			}

			// add info to args.
			$args += "LOD"+$idx + " " + $lod_distance[$idx] + " \"" + $lod_objects[$idx] + "\"";
		}
	}

//	print_Msg("NumMesh: " + $total_mesh);

	if($total_mesh < 1) {
		print_Error("Can't export model: '"+ modelGetName($index) + "' none of the included LODs have meshes.");
		return;
	}

	// should we check if the same mesh is used in multiple LOD's ?
	// would we ever want that?
	// sounds unlikly, but lets just warm about instead of error.

	// we compare each LOD with the others once.
	int $x;
	for($idx = 0; $idx < 4; $idx++) {
		for($x = ($idx+1); $x < 4; $x++) {
			string $items[] = getCommonItems($lod_objects[$idx], $lod_objects[$x]);
			if(size($items) > 0)
				print_Warn("LOD" + $idx + " and LOD" + $x + " share the following meshes: " + stringArrayToString($items, ", "));
		}
	}

	// plugin checks lod distances for us


	// build the shit!
	// we need file name.
	string $filename = modelGetName($index);
  	string $Dir = getOutputDir();
	string $scale = `getAttr ("PotatoGNode.scale")`;
	string $weightThreshold = `getAttr ("PotatoGNode.weightThreshold")`;
	string $uvMergeThreshold = `getAttr ("PotatoGNode.uvMergeThreshold")`;
	string $vertMergeThreshold = `getAttr ("PotatoGNode.vertMergeThreshold")`;
	string $zeroOrigin = `getAttr ("PotatoGNode.zeroOrigin")`;
	string $forceBoneFilters = substituteAllString(`getAttr ("PotatoGNode.forceBoneFilters")`, "\n", " ");
	string $verbose = `getAttr ("PotatoGNode.verbose")`;
	string $mergeMesh = `getAttr ("PotatoGNode.mergeMesh")`;
	string $mergeVerts = `getAttr ("PotatoGNode.mergeVerts")`;
	string $mode = getExportMode();
	string $options = "-progress PotatoExportProgress -dir \"" + $Dir + "\" -scale " + $scale
	+ " -weight_thresh " + $weightThreshold
	+ " -uv_merge_thresh " + $uvMergeThreshold
	+ " -vert_merge_thresh " + $vertMergeThreshold
	+ " -merge_meshes " + $mergeMesh
	+ " -merge_verts " + $mergeVerts
	+ " -zero_origin " + $zeroOrigin
	+ " -mode \"" + $mode + "\" "
	+ " -force_bones \"" + $forceBoneFilters + "\" ";

	if($verbose) {
		$options += " -verbose";
	}

	string $command = "PotatoExportModel " + $args + " -f \"" + $filename + "\" " + $options;

//	print_Msg("cmd: " + $command);

	if(int(`size $Dir`) < 1)
	{
		print_Error("No export dir set! set a path in the paths tab.");
		return;
	}

	// run
	string $errorMsg;
	$error = catch ( $errorMsg = eval( $command ) );
}

global proc string[] getCommonItems(string $a, string $b)
{
	string $aa[] = stringToStringArray($a, " ");
	string $bb[] = stringToStringArray($b, " ");
	return stringArrayRemove(stringArrayRemove($aa, $bb), $bb);
}



global proc potato_AddModelLodEntry(int $index, int $lod_idx)
{
	int $checked = `getAttr ("PotatoGNode.Export" + $index + $lod_idx)`;
	float $distance = `getAttr ("PotatoGNode.Distance" + $index + $lod_idx)`;
	string $objects = `getAttr ("PotatoGNode.ObjectList" + $index + $lod_idx)`;

	text -l "";
	checkBox -l ("LOD" + $lod_idx) -v $checked -cc ("ModelEntryLODIncludeChanged " + $lod_idx + " "+ $index) ("ModelIncludeLod" + $lod_idx + $index );
	floatField -v $distance -s 10 -min 0 -pre 2 -cc ("ModelSetLODDistance " + $lod_idx + " " + $index);
	text -l "0" ("ModelInfoNum" + $lod_idx + $index );
	text -l "0" ("ModelInfoVerts" + $lod_idx + $index );
	text -l "0" ("ModelInfoFaces" + $lod_idx + $index );
	button -label "set" -bgc 0.3 0.3 0.3 -c ("ModelSetLODObjects " + $lod_idx + " " + $index);
	button -label "select" -bgc 0.3 0.3 0.3 -c ("ModelSelectLODObjects " + $lod_idx + " " + $index);
	button -label "clear" -bgc 0.3 0.3 0.3 -c ("ModelClearLODObjects " + $lod_idx + " " + $index);

	string $obj_array[] = stringToStringArray($objects, " ");
	ModelSetLODObjects_internal($lod_idx, $index, $obj_array);
}

global proc potato_AddModelEntry( int $index )
{
	string $name = `getAttr ("PotatoGNode.ModelName" + $index)`;

//	print_Msg("Adding: " + $name + " " + $index);

	frameLayout
	-l $name
	-w 200
	-bs "etchedOut"
	-bv on
	-collapsable true
	-cl false
	-bgc 0.3 0.3 0.45
	-p  modelList ("exportFrame" + $index);

	//rowLayout -numberOfColumns 1 -columnWidth1 120 -columnAlign1 "left";
	//	textFieldGrp -l "Name" -fi $name;

		formLayout -numberOfDivisions 1 -h 20 myForm;

			textFieldGrp -l "Name" -cc ("ModelEntryNameChanged " + $index) -fi $name ("modelName" + $index);
			iconTextButton -st "iconOnly" -i "arrowRight" -w 16 -h 16  -c ("ModelEntryNameChanged " + $index) ("exportModelUpdate" + $index);
			button -label "Export" -bgc 0.6 0.4 0.4 -w 80 -c ("ModelEntryExport " + $index) ("exportModel" + $index);

		formLayout -edit
			-attachForm ("modelName" + $index) "top" 5
			-attachForm ("modelName" + $index) "left" -100
			-attachForm ("exportModelUpdate" + $index) "top" 8
			-attachForm ("exportModelUpdate" + $index) "left" 285
			-attachForm ("exportModel" + $index) "top" 5
			-attachForm ("exportModel" + $index) "right" 5
		myForm;

	gridLayout -numberOfColumns 9 -cellWidthHeight 71 20 -bgc 0.2 0.2 0.2 -p ("exportFrame" + $index);
		text -l "" -bgc 0.15 0.15 0.15;
		text -l "Include"  -bgc 0.15 0.15 0.15;
		text -l "Distance"  -bgc 0.15 0.15 0.15;
		text -l "Objects" -bgc 0.15 0.15 0.15;
		text -l "Verts" -bgc 0.15 0.15 0.15;
		text -l "Faces" -bgc 0.15 0.15 0.15;
		text -l "" -bgc 0.15 0.15 0.15;
		text -l "" -bgc 0.15 0.15 0.15;
		text -l "" -bgc 0.15 0.15 0.15;

		potato_AddModelLodEntry($index,0);
		potato_AddModelLodEntry($index,1);
		potato_AddModelLodEntry($index,2);
		potato_AddModelLodEntry($index,3);
}



global proc potato_copyNodeLODInfo(int $lod_index, int $dest_idx, int $src_idx)
{
	setAttr ("PotatoGNode.Export" + $dest_idx + $lod_index) (`getAttr ("PotatoGNode.Export" + $src_idx + $lod_index)`);
	setAttr ("PotatoGNode.Distance" + $dest_idx + $lod_index)	(`getAttr ("PotatoGNode.Distance" + $src_idx + $lod_index)`);
	setAttr -type "string" ("PotatoGNode.ObjectList" + $dest_idx + $lod_index) (`getAttr ("PotatoGNode.ObjectList" + $src_idx + $lod_index)`);
}

global proc potato_copyNodeInfo(int $dest_idx, int $src_idx)
{
	setAttr -type "string" ("PotatoGNode.ModelName" + $dest_idx) (`getAttr ("PotatoGNode.ModelName" + $src_idx)`);

	potato_copyNodeLODInfo(0, $dest_idx, $src_idx);
	potato_copyNodeLODInfo(1, $dest_idx, $src_idx);
	potato_copyNodeLODInfo(2, $dest_idx, $src_idx);
	potato_copyNodeLODInfo(3, $dest_idx, $src_idx);
}

global proc removeModelLODFromNode(int $lod_index, int $index)
{
	deleteAttr ("PotatoGNode.Export" + $index + $lod_index);
	deleteAttr ("PotatoGNode.Distance" + $index + $lod_index);
	deleteAttr ("PotatoGNode.ObjectList" + $index + $lod_index);
}

global proc removeModelFromNode(int $index)
{
	unlockPotatoNode();
	deleteAttr ("PotatoGNode.ModelName" + $index);

	removeModelLODFromNode(0, $index);
	removeModelLODFromNode(1, $index);
	removeModelLODFromNode(2, $index);
	removeModelLODFromNode(3, $index);
	lockPotatoNode();
}

global proc addModelLODToNode(int $lod_index, int $index, int $include, float $distance)
{
	addAttr -ln ("Export" + $index + $lod_index) -at byte PotatoGNode;
	addAttr -ln ("Distance" + $index + $lod_index) -at "float" PotatoGNode;
	addAttr -ln ("ObjectList" + $index + $lod_index) -dt "string" PotatoGNode;

	setAttr ("PotatoGNode.Export" + $index + $lod_index) $include;
	setAttr ("PotatoGNode.Distance" + $index + $lod_index) $distance;
	setAttr -type "string" ("PotatoGNode.ObjectList" + $index + $lod_index) "";
}

global proc addModelToNode(int $index, string $name)
{
	addAttr -ln ("ModelName" + $index) -dt "string" PotatoGNode;
	setAttr -type "string" ("PotatoGNode.ModelName" + $index) $name;

	addModelLODToNode(0, $index, 1, 0);
	addModelLODToNode(1, $index, 0, 800);
	addModelLODToNode(2, $index, 0, 1600);
	addModelLODToNode(3, $index, 0, 2200);
}

global proc potato_AddModel()
{
	string $text;
	string $result = `promptDialog
	    -title "Add Model"
	    -message "Enter Name:"
	    -button "OK" -button "Cancel"
	    -defaultButton "OK" -cancelButton "Cancel"
	    -dismissString "Cancel"`;

	if ($result == "OK" ) {
		$name = `promptDialog -query -text`;
		if(int(`size $name`) < 3){
			print_Error("Name must be at least 3 chars long.");
		} else {

			if(assetDB_add("model", $name) != 0) {
				return;
			}

			unlockPotatoNode();

			int $numModels = `getAttr PotatoGNode.numModels`;

				addModelToNode($numModels, $name);
				potato_AddModelEntry($numModels);

			$numModels++;

			setAttr PotatoGNode.numModels $numModels;
			lockPotatoNode();
		}
	}
}


global proc potato_removeModel(string $name)
{
	if(assetDB_remove("model", $name) != 0) {
		return;
	}

	// we must remove from gui and settings o.o
	// first get the index.
	int $numModels = `getAttr PotatoGNode.numModels`;
	int $i;
	int $entry_idx = -1;

	for($i = 0; $i < $numModels; $i++)
	{
		string $str = `getAttr ("PotatoGNode.ModelName" + $i)`;
		if($name == $str) {
			$entry_idx = $i;
			break;
		}
	}
	for($i = $entry_idx; $i < ($numModels-1); $i++)
	{
		potato_copyNodeInfo($i, $i+1);
	}

	$numModels--;

	removeModelFromNode($numModels);

	setAttr PotatoGNode.numModels $numModels;

	// now we just remake the window.
	potato_ShowModelExport();
}

global proc potato_DoDeleteSelected()
{
	string $items[] = `textScrollList -q -si DeleteListCntl`;
	int $i;
	int $size = `size $items`;
	for($i = 0; $i < $size; $i++) {
		textScrollList -e -ri $items[$i] DeleteListCntl;
		potato_removeModel($items[$i]);
	}

//	print_Msg("items: " + stringArrayToString($items, " "));
}

global proc potato_DeleteEntry()
{
	// we want to show the names of all the models.
	// in a list
	// and provide a delete button :)
	string $name = "potato_DeleteEntry";
	string $closeDialog = "deleteUI " + $name;
	if (`window -exists $name`)
		deleteUI $name;

	// build a list you goat!
	int $numModels = `getAttr PotatoGNode.numModels`;
	int $i;

	if($numModels < 1)
		return;

	window  -title "Potato - Delete Entry" -wh 300 180 -s true $name;
		formLayout -numberOfDivisions 100 -h 40 Export;

			textScrollList -numberOfRows $numModels -allowMultiSelection true -h 190 DeleteListCntl;
			for($i = 0; $i < $numModels; $i++) {
				string $name = `getAttr ("PotatoGNode.ModelName" + $i)`;
				textScrollList -e -append $name DeleteListCntl;
			}

			// Model Util Buttons
			rowLayout -numberOfColumns 2 -height 28 -cw2 142 142  -ct2 "both" "both" -co2 1 1 -p Export deleteEntryRow;
				button -label "Delete Selected" -align "center" -c potato_DoDeleteSelected;
				button -label "Close" -align "center" -c $closeDialog;

		formLayout -edit
			-af DeleteListCntl left 0
			-af DeleteListCntl right 0
			-af DeleteListCntl top 0
			-ac DeleteListCntl bottom 0 deleteEntryRow
			-af deleteEntryRow bottom 0
			-af deleteEntryRow left 0
		Export;

	showWindow $name;
}

global proc addAnimToNode(int $index, string $name)
{
	// for each anim we need to save:
	// * name
	// * start frame
	// * end frame
	// * node names
	addAttr -ln ("AnimName" + $index) -dt "string" PotatoGNode;
	addAttr -ln ("AnimStart" + $index) -at long PotatoGNode;
	addAttr -ln ("AnimEnd" + $index) -at long PotatoGNode;
	addAttr -ln ("AnimNodes" + $index) -dt "string" PotatoGNode;

	// assign defaults.
	setAttr ("PotatoGNode.AnimName" + $index) -type "string" $name;
	setAttr ("PotatoGNode.AnimStart" + $index) 0;
	setAttr ("PotatoGNode.AnimEnd" + $index) 0;
	setAttr ("PotatoGNode.AnimNodes" + $index) -type "string" "";
}


global proc int[] getTimeLineRange()
{
	float $minTime = `playbackOptions -q -minTime`;
	float $maxTime = `playbackOptions -q -maxTime`;

	int $res[] = { (int)(floor ($minTime)), (int)(ceil( $maxTime)) };
	return $res;
}

global proc setTimeLineRange(float $start, float $end)
{
	playbackOptions -minTime $start -maxTime $end;
}

global proc AnimEntryTimeLineSet(int $index)
{
	print_Msg("set timeline for animation index: " + $index);

	$timeLine = getTimeLineRange();
	print_Msg("current timeline: " + $timeLine[0] + ", " + $timeLine[1]);

	// update settings
	setAttr ("PotatoGNode.AnimStart" + $index)  $timeLine[0];
	setAttr ("PotatoGNode.AnimEnd" + $index)  $timeLine[1];

	// update UI
	intFieldGrp -e -value1 $timeLine[0] ("exportAnimFrameStart" + $index);
	intFieldGrp -e -value1 $timeLine[1] ("exportAnimFrameEnd" + $index);

	$numFrames =  $timeLine[1] -  $timeLine[0];
	intFieldGrp -e -value1 $numFrames ("exportAnimFrames" + $index);
}

global proc AnimEntrySetNodes_internal(int $index, string $nodes[])
{
	string $nodes_str = "";

	for($obj in $nodes) {
		$nodes_str = $nodes_str + $obj + " ";
	}

	if (`size $nodes`)
	{
		int $num = size($nodes);

		intFieldGrp -e -value1 $num ("exportAnimNodes" + $index);

		setAttr -type "string" ("PotatoGNode.AnimNodes" + $index) $nodes_str;
	}
}

global proc AnimEntrySetNodes(int $index)
{
	print_Msg("set nodes for animation index: " + $index);

	string $Selected[] = `ls -type joint`;
	if (`size $Selected`) {
		AnimEntrySetNodes_internal($index, $Selected);
	} else {
		print_Warn("unable to set nodes. no valid nodes selected");
	}
}

global proc AnimEntrySelectNodes(int $index)
{
	print_Msg("select nodes for animation index: " + $index);

	// get slammed.
	string $nodes = `getAttr ("PotatoGNode.AnimNodes" + $index)`;
	string $nodesArray[];

	string $validNodes;
	string $deletedNodes;


	int $idx;
	int $num = `tokenize $nodes " " $nodesArray`;

	if ( $num > 1 ) {
		for ( $idx = 0; $idx < $num; $idx++ ) {
			if( `objExists $nodesArray[$idx]` )
				$validNodes += $nodesArray[$idx] + " ";
			else
				$deletedNodes += $nodesArray[$idx] + " ";
		}
	} else {
		$validNodes = $nodes;
	}

	$res = ("select -r " + $validNodes);
	eval $res;

	if ( $deletedNodes != "" )
	{
		// objects added previously that no longer exsist.
	}
}

global proc string animGetName(int $index) {
	return `textFieldGrp -q -fi ("animName" + $index)`;
}

global proc AnimEntryNameChanged(int $index)
{
	string $name = `textFieldGrp -q -fi ("animName" + $index)`;
	string $nameOld = `getAttr ("PotatoGNode.AnimName" + $index)`;

	if(assetDB_rename("anim", $nameOld, $name) != 0) {
		// reset the name
 		textFieldGrp -e -fi $nameOld ("animName" + $index);
		return;
	}

	frameLayout -e -l $name ("exportAnimFrame" + $index);

	// node needs updating
	setAttr -type "string" ("PotatoGNode.AnimName" + $index) $name;
}

global proc AnimEntryExport(int $index)
{
	string $nodes = `getAttr ("PotatoGNode.AnimNodes" + $index)`;
	int $start = `getAttr ("PotatoGNode.AnimStart" + $index)`;
	int $end = `getAttr ("PotatoGNode.AnimEnd" + $index)`;
	int $numFrames =  $end -  $start;

	if($numFrames < 1) {
		print_Error("Can't export anim \"" + animGetName($index) + "\" has zero frames");
		return;
	}
	if(int(`size $nodes`) < 1) {
		print_Error("Can't export anim \"" + animGetName($index) + "\" has zero nodes");
		return;
	}
	string $args;

	$args += "Nodes \"" + $nodes + "\"";
	$args += " Start " + $start;
	$args += " End " + $end;

	// make the command
	string $filename = animGetName($index);
	string $Dir = getOutputDirAnims();
	string $options = "-progress PotatoExportProgress -dir \"" + $Dir + "\"";
	string $command = "PotatoExportAnim " + $args + " -f \"" + $filename + "\" "+ $options;

	print_Msg("cmd: " + $command);

	if(int(`size $Dir`) < 1)
	{
		print_Error("No export dir set! set a path in the paths tab.");
		return;
	}

	string $errorMsg;
	$error = catch ( $errorMsg = eval( $command ) );
}

global proc potato_AddAnimEntry( int $index )
{
	string $name = `getAttr ("PotatoGNode.AnimName" + $index)`;

	frameLayout
	-l $name
	-w 200
	-bs "etchedOut"
	-bv on
	-collapsable true
	-cl false
	-bgc 0.3 0.3 0.45
	-p  AnimList ("exportAnimFrame" + $index);

	formLayout -numberOfDivisions 2 -h 90 myForm;

		textFieldGrp -l "Name" -cc ("AnimEntryNameChanged " + $index) -fi $name ("animName" + $index);
		iconTextButton -st "iconOnly" -i "arrowRight" -w 16 -h 16  -c ("AnimEntryNameChanged " + $index) ("exportAnimUpdate" + $index);
		button -label "Export" -bgc 0.6 0.4 0.4 -w 80 -c ("AnimEntryExport " + $index) ("exportAnim" + $index);

		// time line stuff
		intFieldGrp -cw 2 40 -label "Start" ("exportAnimFrameStart" + $index);
		intFieldGrp -cw 2 40 -label "End" ("exportAnimFrameEnd" + $index);
		intFieldGrp -cw 2 40 -enable1 false -label "Frames" ("exportAnimFrames" + $index);
		button -label "Set to timeline" -bgc 0.4 0.4 0.4 -w 80 -c ("AnimEntryTimeLineSet " + $index) ("exportAnimTimeLine" + $index);

		// nodes
		button -label "Set from selected" -bgc 0.4 0.4 0.4 -w 110 -c ("AnimEntrySetNodes " + $index) ("exportAnimSetNodes" + $index);
		button -label "Select export nodes" -bgc 0.4 0.4 0.4 -w 110 -c ("AnimEntrySelectNodes " + $index) ("exportAnimSelectNodes" + $index);
		intFieldGrp -cw 2 40 -enable1 false -label "Nodes" ("exportAnimNodes" + $index);


	formLayout -edit
		-attachForm ("animName" + $index) "top" 5
		-attachForm ("animName" + $index) "left" -100
		-attachForm ("exportAnimUpdate" + $index) "top" 8
		-attachForm ("exportAnimUpdate" + $index) "left" 285
		-attachForm ("exportAnim" + $index) "top" 5
		-attachForm ("exportAnim" + $index) "right" 5

		-attachForm ("exportAnimFrameStart" + $index) "top" 30
		-attachForm ("exportAnimFrameStart" + $index) "left"  -100
		-attachForm ("exportAnimFrameEnd" + $index) "top" 30
		-attachForm ("exportAnimFrameEnd" + $index) "left"  -30
		-attachForm ("exportAnimFrames" + $index) "top" 30
		-attachForm ("exportAnimFrames" + $index) "left"  55

		-attachForm ("exportAnimTimeLine" + $index) "top" 30
		-attachForm ("exportAnimTimeLine" + $index) "left"  245

		-attachForm ("exportAnimSetNodes" + $index) "top" 60
		-attachForm ("exportAnimSetNodes" + $index) "left"  10
		-attachForm ("exportAnimSelectNodes" + $index) "top" 60
		-attachForm ("exportAnimSelectNodes" + $index) "left"  125
		-attachForm ("exportAnimNodes" + $index) "top" 60
		-attachForm ("exportAnimNodes" + $index) "left"  130
	myForm;

	// what we need
	// start - end frames
	// list of nodes to export.
	// note tracks

	// frames:
	// need to be manually set plus ability to set them to the current rage of the timeline

	// nodes:
	// setting based on selected
	// select all bones button? (maybe have that at bottom of menu as a helper button)

	// note tracks:
	// need to be able to add events to the animations timeline.

	// set values.
	int $start = `getAttr ("PotatoGNode.AnimStart" + $index)`;
	int $end = `getAttr ("PotatoGNode.AnimEnd" + $index)`;
	int $numFrames =  $end -  $start;

	intFieldGrp -e -value1 $start ("exportAnimFrameStart" + $index);
	intFieldGrp -e -value1 $end ("exportAnimFrameEnd" + $index);
	intFieldGrp -e -value1 $numFrames ("exportAnimFrames" + $index);

	// nodes
	string $nodes = `getAttr ("PotatoGNode.AnimNodes" + $index)`;
	string $nodes_array[] = stringToStringArray($nodes, " ");
	AnimEntrySetNodes_internal($index, $nodes_array);
}

global proc potato_AddAnim()
{
	string $text;
	string $result = `promptDialog
	    -title "Add Anim"
	    -message "Enter Name:"
	    -button "OK" -button "Cancel"
	    -defaultButton "OK" -cancelButton "Cancel"
	    -dismissString "Cancel"`;

	if ($result == "OK" ) {
		$name = `promptDialog -query -text`;
		if(int(`size $name`) < 3){
			print_Error("Name must be at least 3 chars long.");
		} else {

			if(assetDB_add("anim", $name) != 0) {
				return;
			}

			unlockPotatoNode();

			int $numAnims = `getAttr PotatoGNode.numAnims`;

			print_Msg("numanim: " + $numAnims);

				addAnimToNode($numAnims, $name);
				potato_AddAnimEntry($numAnims);

			$numAnims++;

			print_Msg("numanim: " + $numAnims);

			setAttr PotatoGNode.numAnims $numAnims;
			lockPotatoNode();
		}
	}
}

global proc urlMainSite()
{
	system("load http://www.tom-crowley.co.uk/");
}

global proc urlYouTube()
{
	system("load https://www.youtube.com/user/tombmxcrowley/");
}

global proc potato_CreateExportWindow( string $name )
{
	string $closeDialog = "deleteUI " + $name;

	if (`window -exists $name`)
		deleteUI $name;
	if (`window -exists potato_DeleteEntry`)
		deleteUI potato_DeleteEntry;

	window  -title "Potato - Anim / Model Exporter" -wh 676 540 -s true $name;

	// columnLayout -cal "center" -adj 1 -p $name mainLayout;
	formLayout mainLayout;

	{
        tabLayout -imw 6 -imh 6 -p mainLayout tabs;

// Export Tab
		formLayout -numberOfDivisions 100 -h 40 ModelExport;
			image -w 32 -h 32 -i "potato-logo" -p ModelExport winLogo;

			scrollLayout -p ModelExport modelScrollArea;
			columnLayout -columnAttach "both" 0 -rowSpacing 0 -columnWidth 641 -p modelScrollArea modelList;

			// Model Util Buttons
			rowLayout -numberOfColumns 2 -height 28 -cw2 105 105  -ct2 "both" "both" -co2 1 1 -p ModelExport ModelUtilButtons;

				button -label "Add Model" -align "center" -c "potato_AddModel" -p ModelUtilButtons;
				button -label "Delete Entry" -align "center" -c potato_DeleteEntry -p ModelUtilButtons;


		formLayout -edit
			-af winLogo "top" 2
			-af winLogo "right" 0
			-af modelScrollArea left 0
			-af modelScrollArea right 0
			-af modelScrollArea top 36
			-ac modelScrollArea bottom 0 ModelUtilButtons
			-af ModelUtilButtons bottom 0
			-af ModelUtilButtons left 0
			ModelExport;

// Anim Export Tab

	formLayout -numberOfDivisions 100 -h 40   -p tabs  AnimExport;
		image -w 32 -h 32 -i "potato-logo" -p AnimExport winLogoAnim;

		scrollLayout -p AnimExport AnimScrollArea;
			columnLayout -columnAttach "both" 0 -rowSpacing 0 -columnWidth 641 -p AnimScrollArea AnimList;

			// Anim Util Buttons
			rowLayout -numberOfColumns 2 -height 28 -cw2 105 105  -ct2 "both" "both" -co2 1 1 -p AnimExport AnimUtilButtons;

				button -label "Add Anim" -align "center" -c "potato_AddAnim" -p AnimUtilButtons;
				button -label "Delete Entry" -align "center" -c potato_DeleteEntry -p AnimUtilButtons;

			rowLayout -numberOfColumns 1 -height 28 -cw1 130 -ct1 "both" -co1 1 -p AnimExport AnimUtilButtons2;
				button -label "Select all bones in scene" -align "right" -c potato_SelectAllBonesInScene -p AnimUtilButtons2;

		formLayout -edit
			-af winLogoAnim "top" 2
			-af winLogoAnim "right" 0
			-af AnimScrollArea left 0
			-af AnimScrollArea right 0
			-af AnimScrollArea top 36
			-ac AnimScrollArea bottom 0 AnimUtilButtons
			-af AnimUtilButtons bottom 0
			-af AnimUtilButtons left 0
			-ac AnimScrollArea bottom 0 AnimUtilButtons2
			-af AnimUtilButtons2 bottom 0
			-af AnimUtilButtons2 right 0
			AnimExport;

// Path Tab
  		columnLayout -cat "both" 5 -cal "center" -adj 1 -rs 20  -p tabs Paths;

  		string $OutDir = getOutputDir();
			string $OutDirAnim = getOutputDirAnims();

			frameLayout -l "Models" -marginHeight 2 -marginWidth 2 -w 200 -bs "etchedOut" -bv on -collapsable true -cl false -p Paths pathTabFrame1;
				textFieldButtonGrp -l "Output Directory" -bl "..." -bc browseForDir -ed false - fi $OutDir -p pathTabFrame1 pathsOutputDir;

			frameLayout -l "Animations" -marginHeight 2 -marginWidth 2 -w 200 -bs "etchedOut" -bv on -collapsable true -cl false -p Paths pathTabFrame2;
			  textFieldButtonGrp -l "Output Directory" -bl "..." -bc browseForDir_anim -ed false - fi $OutDirAnim -p pathTabFrame2 pathsAnimOutputDir;

// Settings Tab
  		columnLayout -cat "both" 5 -cal "center" -adj 1 -rs 20  -p tabs Settings;

			frameLayout -l "Model" -marginHeight 2 -marginWidth 2 -w 200 -bs "etchedOut" -bv on -collapsable true -cl false -p Settings setTabFrame1;
				checkBoxGrp -l "Merge Mesh" -value1 `getAttr PotatoGNode.mergeMesh` -cc mergeMeshUpdate -p setTabFrame1 mergeMeshCntrl;
				checkBoxGrp -l "Merge Verts" -value1 `getAttr PotatoGNode.mergeVerts` -cc mergeVertsUpdate -p setTabFrame1 mergeVertsCntrl;

				floatFieldGrp -l "Scale" -nf 1 -pre 3  -v1 `getAttr PotatoGNode.scale` -cc ScaleUpdate -p setTabFrame1 ScaleCntrl;
				floatSliderGrp -l "Uv Merge Threshold" -min 0 -max 0.999 -s 0.00001 -v `getAttr PotatoGNode.uvMergeThreshold` -f true -cc uvMergeThresholdUpdate -p setTabFrame1 uvMergeThreshCntl;
				floatSliderGrp -l "Vert Merge Threshold" -min 0 -max 0.999 -s 0.00001 -v `getAttr PotatoGNode.vertMergeThreshold` -f true -cc vertMergeThresholdUpdate -p setTabFrame1 vertMergeThreshCntl;

			frameLayout -l "Bones" -marginHeight 2 -marginWidth 2 -w 200 -bs "etchedOut" -bv on -collapsable true -cl false -p Settings setTabFrame2;
				columnLayout -adj 1 -cal "center" -p setTabFrame2 setcolLayout1;
					floatSliderGrp -l "Weight Threshold" -min 0 -max 0.999 -s 0.001 -v `getAttr PotatoGNode.weightThreshold` -f true -cc weightThresholdUpdate -p setcolLayout1 weightThreshCntl;
					checkBoxGrp -l "Zero-out origin" -value1 `getAttr PotatoGNode.zeroOrigin` -cc zeroOutOriginUpdate -p setcolLayout1 zeroOriginCntrl;

				rowLayout -nc 2 -cw2 140 140 -p setTabFrame2 boneForceRow;
					columnLayout -cal "right" -w 137 -h 60 -p boneForceRow colLayoutBone;
						text -w 137 -l "Force Include bones" -al "right" -p colLayoutBone;
					scrollField -w 160 -h 60 -tx `getAttr PotatoGNode.forceBoneFilters` -cc forceBoneFiltersUpdate -p boneForceRow forceBoneFiltersCntrl;

			frameLayout -l "Misc" -marginHeight 4 -marginWidth 2 -w 200 -bs "etchedOut" -bv on -collapsable true -cl false -p Settings setTabFrame3;
				columnLayout -adj 1 -cal "center" -p setTabFrame3 setcolLayout2;

					checkBoxGrp -l "Verbose" -value1 `getAttr PotatoGNode.verbose` -cc verboseUpdate -p setcolLayout2 verboseCntrl;

					optionMenuGrp -l "Export Mode" -p setcolLayout2  -cc exportModeUpdate exportModeCntrl;
						menuItem -label "Server";
						menuItem -label "Raw";

					string $exportMode = getExportMode();
					optionMenuGrp -e -v $exportMode exportModeCntrl;
// Help Tab
		string $help;
		$help += "How To Export:\n";
		$help += "  -Add a new entry to the model list\n";
		$help += "  -Name the model\n";
		$help += "  -Select the meshes you wish to export\n";
		$help += "  -Click set on the LOD you wish to add the meshes to\n";
		$help += "  -Click Export\n";
		$help += "\n";
		$help += "Settings:\n";
		$help += "	-Model\n";
		$help += " 		scale: 				scales the model and bones, Maya scene is unaffected\n";
		$help += "	-Bones\n";
		$help += " 		weight threshold: 	vertex weights below this value are ignored\n";
		$help += " 		zero-out orign: 	places the root of the model at (0,0,0)\n";
		$help += " 		force inc bones: 	forces bones matching any of the filters to be included\n";
		$help += "\n";
		$help += "Model Info:\n";
		$help += " 	-All models must be polygons.\n";
		$help += " 	-The plugin supports polygons with more than 3 verts per face,\n";
		$help += " 		it will convert them to triangles for you.\n";
		$help += " 	-Binded bones are automatically added.\n";
		$help += " 	-Bones with no binds to the selected export meshes will not be included,\n";
		$help += " 		unless thier name matches on of the force-inc bone filters set in settings..\n";
		$help += " 	-You can skip 'include LOD0' as long as atleast one lod is included. it just places\n";
		$help += " 		the first included lod as LOD0 automatically, the next as LOD1 and so on.\n";
		$help += " 	-LOD distance of 0 is equivalent to unlimted.\n";
		$help += " 	-LOD distances must be positive and increased in distance.\n";
		$help += " 	-Meshes with identical materials may be merged automatically,\n";
		$help += " 		making it possible to have more than 64 meshes set per a lod in somecases.\n";
		$help += " 	-Meshes with no binds are automatically binded to the root bone\n";
		$help += "\n";
		$help += "Limits:\n";
		$help += " 	Max Verts:  			65535 (per LOD)\n";
		$help += " 	Max Triangles:  		65535 (per LOD)\n";
		$help += " 	Max Meshes:  			64 (per a LOD)\n";
		$help += " 	Max Bones:  			255\n";
		$help += " 	Max binds per vert:  	8\n";
		$help += "\n";
		$help += "Jargon:\n";
		$help += " 	LOD:			'Level of Detail' LOD0 should the highest quality version of the model,\n";
		$help += " 	 				with each LOD having less verts, LOD3 having the least detail.\n";
		$help += " 	LOD(Distance): 	The distance at which the model is switched to the LOD.\n";
		$help += " 	 				for example a LOD0 with 800 distance means at 800 LOD1 is used(if included), \n";
		$help += " 	 				LOD1 with 1600 distance means LOD1 is used untill distance is 1600. \n";

		// THE TAB!
		// columnLayout  -cal "center" -adj 1 -rs 20  -p tabs Help;
		formLayout -numberOfDivisions 100 -h 40 -p tabs Help;

			scrollField -text $help -ed 0 helpScrollArea;
			rowLayout -numberOfColumns 1 -height 2 -cw1 105 -ct1 "both" -co1 1  -p Help fakerow;

		formLayout -edit
			-af helpScrollArea left 0
			-af helpScrollArea right 0
			-af helpScrollArea top 1
			-ac helpScrollArea bottom 0 fakerow
			-af fakerow bottom 0
			-af fakerow left 0
		Help;

// About Tab
  		columnLayout -cat "both" 5 -cal "center" -adj 1 -rs 20  -p tabs About;

			frameLayout -l "Info" -marginHeight 5 -marginWidth 5 -w 200 -bs "etchedOut" -bv on -collapsable true -cl false -p About aboutTabFrame1;

				string $info;
				$info += "Potato Engine - (Anim/Model) Export Plugin\n";
				$info += " UI Version  :\t 1.1\n";
				$info += " File Ext :\t .model, .raw_model, .inter_anim\n";
				$info += " Made By  :\t Tom Crowley\n\n";
				scrollField -w 300 -h 100 -text $info -ed 0 -p aboutTabFrame1;

			frameLayout  -l "Websites" -marginHeight 5 -marginWidth 5 -bs "etchedOut" -bv on -collapsable true -p About aboutTabFrame2;
				columnLayout -adj 1 -h 60 -cal "center" -p aboutTabFrame2 colLayout1;
					button -l "tom-crowley.co.uk" -p colLayout1 -c urlMainSite;
					button -l "YouTube" -p colLayout1 -c urlYouTube;

	}

	rowLayout -numberOfColumns 3 -height 28 -cw3 105 105 105 -ct3 "both" "both" "both" -co3 1 1 1 -p mainLayout mainButtons;
		button -label "Export All" -align "center" -bgc 0.7 0.3 0.3 -c potato_ExportAll;
		button -label "Reset Settings" -align "center" -c potato_resetSettings;
		button -label "Close" -align "center" -c $closeDialog;

	rowLayout -numberOfColumns 1 -height 28 -cw1 160 -ct1 "both" -co1 1 -p mainLayout exportProgressRow;
		progressBar -w 120 -min 0 -max 7 PotatoExportProgress;

	formLayout -edit
         -af tabs left 0
         -af tabs right 0
         -af tabs top 0
         -ac tabs bottom 0 mainButtons
         -af mainButtons bottom 1
         -af mainButtons left 1
         -af exportProgressRow bottom 1
         -af exportProgressRow right 1
	mainLayout;
}


global proc potato_AddSavedItems()
{
	int $num = `getAttr PotatoGNode.numModels`;
	int $i = 0;
	for($i =0; $i < $num; $i++)
	{
		potato_AddModelEntry($i);
	}

	$num = `getAttr PotatoGNode.numAnims`;
	for($i =0; $i < $num; $i++)
	{
		potato_AddAnimEntry($i);
	}
}

global proc potato_ShowModelExport()
{
	ensureNode();
	unlockPotatoNode();

	string $name = "potato_ExportWindow";
	potato_CreateExportWindow $name;

	// add any items stored in settings.
	potato_AddSavedItems();

	showWindow $name;
}


global proc potato_ShowAnimExport()
{

}

global proc CreateMenu()
{
	global string $gMainWindow;
	global string $gMenuModeButton;
	string $userName;
	string $tokName[];
	string $mayaMode = `setMenuMode`;
	string $site = "system(\"load http://www.tom-crowley.co.uk/ \")";

	if(`menu -exists PotatoToolsMenu`)
	deleteUI -menu PotatoToolsMenu;

	setParent $gMainWindow;

	menu
	-label "Potato - Tools"
	-parent $gMainWindow
	-allowOptionBoxes false
	-tearOff true
	PotatoToolsMenu;

	setParent -menu ..;

	menuItem -label "Exporter" -command "potato_ShowModelExport";
	menuItem -divider true;
	menuItem -label "Select and reveal all bones" -command "potato_SelectAllBonesInScene";
	menuItem -label "Select and reveal all mesh" -command "potato_SelectAllMeshInScene";
	menuItem -divider true;
	menuItem -label "Site" -command $site;

	hotBox -updateMenus;
}

global proc potato_resetSettingsALL() // clears everything, for my use not called by GUI.
{
	unlockPotatoNode();
	delete PotatoGNode;
	ensureNode();
}

global proc potato_resetSettings()
{
	$response = `confirmDialog -title "Confirm Setting Reset"
			              -message "Are you sure you want to reset settings?"
			              -button "Yes"
			              -button "No"
			              -defaultButton "Yes"
			              -cancelButton "No"
			              -dismissString "No"`;

		// check response
	if( $response != "Yes" )
		return;

	unlockPotatoNode();

	// we only want to reset settings not model entry.
	setAttr PotatoGNode.outputDir -type "string" "";
	setAttr PotatoGNode.scale 1.0;
	setAttr PotatoGNode.weightThreshold 0.005;
	setAttr PotatoGNode.uvMergeThreshold 0.02;
	setAttr PotatoGNode.vertMergeThreshold 0.02;
	setAttr PotatoGNode.mergeMesh 1;
	setAttr PotatoGNode.mergeVerts 1;
	setAttr PotatoGNode.zeroOrigin 1;
	setAttr PotatoGNode.verbose 0;
	setAttr PotatoGNode.forceBoneFilters -type "string" "tag_";

	lockPotatoNode();

	potato_ShowModelExport();
}

global proc initNodeDefaults()
{
	if ( !`attributeExists numModels PotatoGNode`)
	{
		addAttr -ln numModels -at byte PotatoGNode;
		addAttr -ln numAnims -at byte PotatoGNode;
		addAttr -ln outputDir -dt "string" PotatoGNode;
		addAttr -ln outputDirAnims -dt "string" PotatoGNode;
		addAttr -ln scale -at "float" -min 0.001 -max 1000 -dv 1.0 PotatoGNode;
		addAttr -ln weightThreshold -at "float" -min 0.00001 -max 0.999 -dv 0.005 PotatoGNode;
		addAttr -ln uvMergeThreshold -at "float" -min 0.000001 -max 0.999 -dv 0.005 PotatoGNode;
		addAttr -ln vertMergeThreshold -at "float" -min 0.000001 -max 0.999 -dv 0.005 PotatoGNode;
		addAttr -ln mergeMesh -min 0 -max 1 -dv 1 PotatoGNode;
		addAttr -ln mergeVerts -min 0 -max 1 -dv 1 PotatoGNode;
		addAttr -ln zeroOrigin -min 0 -max 1 -dv 1 PotatoGNode;
		addAttr -ln verbose -min 0 -max 1 -dv 1 PotatoGNode;
		addAttr -ln forceBoneFilters -dt "string" PotatoGNode;

		setAttr PotatoGNode.numModels 0;
		setAttr PotatoGNode.numAnims 0;
		setAttr PotatoGNode.outputDir -type "string" "";
		setAttr PotatoGNode.outputDirAnims -type "string" "";
		setAttr PotatoGNode.scale 1;
		setAttr PotatoGNode.weightThreshold 0.005;
		setAttr PotatoGNode.uvMergeThreshold 0.02;
		setAttr PotatoGNode.vertMergeThreshold 0.02;
		setAttr PotatoGNode.mergeMesh 1;
		setAttr PotatoGNode.mergeVerts 1;
		setAttr PotatoGNode.zeroOrigin 1;
		setAttr PotatoGNode.verbose 0;
		setAttr PotatoGNode.forceBoneFilters -type "string" "tag_";
	}
}

global proc ensureNode()
{
	$PotatoGNodeArray = `ls PotatoGNode`;
	if ( `size $PotatoGNodeArray` == 0 ) {
		createNode "renderLayer" -n "PotatoGNode";
		initNodeDefaults();
	}

	lockNode PotatoGNode;
	select -cl;
}

global proc unlockPotatoNode()
{
	int $lockCheck[];
	$lockCheck = `lockNode -q PotatoGNode`;
	if($lockCheck[0])
		lockNode -lock off PotatoGNode;
}

global proc lockPotatoNode()
{
	lockNode PotatoGNode;
}

global proc poatoCreateUI()
{
	CreateMenu();

	// show it for debug
	potato_ShowModelExport();
//	potato_ShowAnimExport();
}

global proc potatoAfterFileOpen()
{
	// called after a file has been opended.

	// re fresh the export window, if it's open
	if (`window -exists "potato_ExportWindow"`) {
		potato_ShowModelExport();
	}
}