
Runtime:

  CallStacks:
    ✔ Send PDB sigs to server @done (19-04-18 19:18)
    ✔ Callstack cache @done (19-04-18 20:56)
    ✔ Linking callstacks with zones (you just pass to format string). @done (19-04-18 20:57)
      ✔ Support passing callstacks to printf strings using %t @done (19-04-18 20:56)
      - not sure how best to display this
    ✔ Send callstacks to server @done (19-04-13 12:55)

  Performance:
    ✘ Have each thread store a format string cache. @cancelled (19-04-26 21:28)
     ✘ if we have any format specifiers @cancelled (19-04-26 21:28)
     ✘ if any of them are strings and the indexes (also need to support length prefix) @cancelled (19-04-26 21:28)
     ✘ Explore having a mini string format cache on each thread to improve tight loop performance. @cancelled (19-04-26 21:28)

   ☐ Make the format praser faster, SIMD maybe.

  Strings:
     ✔ Support printf @done (19-03-21 23:34)
     ☐ Support dynamic strings
       Basically need some buffer where we copy the string and return a point to it.
       and it's position should never change.


  Misc:
    ✔ Capture and send program command line @done (19-02-15 17:05)
    ✔ Support writing trace data to disk. @done (19-04-29 22:16)
    ✔ Support sending thread group info @done (19-05-19 17:10)

  Plots:
    ✔ Implement plots @done (19-04-13 12:56)
    ☐ Support plot aggregation based on paths in format string.

  Polish:
    ✔ Handle TelemStartup been called multiple times better. @done (19-05-25 13:12)
    ☐ Remove the need for dbgHelp.
    ☐ Get rid of the CRT (low priority)
      * spintf
      * memcpy : wonder if could get some speed up by making a fixed sized memcpy
      * malloc
      *
    ✔ Handle disconnects better @done (19-05-18 14:07)
      ✘ Try reconnect? @cancelled (19-05-18 14:07)
        Sounds painful unless you can resume.

   ☐ Support a checked build
     ☐ Will need to solve the logging deadlock issue tho.
       Maybe I could disable telem for that thread.
     ☐ Validate format strings
     ☐ Handle forgetting to call zoneEnd.

Veiwer:

    ✔ Notice server disconnects and show option to connect again. @done (19-04-28 11:53)
    ☐ Support showing zoneData
    ☐ Support showing child time
    ☐ Fix issue with overlapping lock holds due to context switches.
    ☐ Show plots
    ☐ Show messages
    ☐ Support thread group info.
      ☐ Allow overrides in viewer (drag to resort etc..)


ServerLib:

  Zones:
    ✔ Build total time and counts for each zone. @done (19-04-07 18:43)
      ☐ Move hot siblings to front of child list.
    ☐ Support zone counts for each frame.

  ✔ Support clients creating multiple traces per second. @done (19-04-02 22:24)
    Currently this don't work since db names clash.

  ✔ Create nice api for the server exe to just run. @done (19-05-25 17:54)
  ✔ Support multiple client connections / data streams @done (19-04-26 20:53)

  ✔ Process the incoming data @done (19-03-17 12:45)
    ✔ Use a thread pool for processing data from multiple clients. @done (19-04-26 20:53)

  ✔ Have a api for querying data for a given client @done (19-03-17 12:45)
     ✔ Also support a REST like api, so remote viewers can connect. @done (19-03-17 12:45)

 ✔ Prosess format specifiers on ingest, anding new ones to db. @done (19-03-23 10:59)
   ✔ Might have to map plain strings to new indexes since the set will be much bigger. @done (19-03-23 10:59)

 ☐ Implment symbol resolving.
   ☐ Add support for symbol paths
     ☐ Support downloading symbols from remove servers.
   ☐ Add logic for resolving the symbols.

     - The symbol resolving needs to be lazy so the viewer requests it to be done.
       This way the symbols can be added after a trace was made and they will resolve.

 ✔ Explore having a buffer for incoming socket data rather than letting it sit in the socket buffer. @done (19-05-16 20:21)
   this way we can grab more than MAX_PACKET_SIZE at a time and can make the buffer pretty big like 1MB
   see if it helps reduce stalls.
   ✔ Make it so we can have a buffer bigger than socket. @done (19-06-01 18:21)
     Currently I only use the buffer for reading from socket so can only ever read socket buffer size.
     When ideally I want to be able to say have a 64MB buffer that we drain the socket into.
     That way we can handle massive spikes etc.


 ✔ Have the server tell connected viewerers about new traces. @done (19-05-25 17:54)


Server:

  ✔ Ideally just load the ServerLib and bind! @done (19-03-17 12:44)

Architecture:
  - Server that can just run all the time collecting logs from the network.
  - Multiple viewers can connect to the server and look at traces
  - Viewer can be started with local server
  - Both local and remote viewing should support realtime view.
