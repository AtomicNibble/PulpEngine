#ifndef _MFnAssembly
#define _MFnAssembly
//-
// ==========================================================================
// Copyright (C) 2011 Autodesk, Inc., and/or its licensors.  All
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its
// licensors,  which is protected by U.S. and Canadian federal copyright law
// and by international treaties.
//
// The Data may not be disclosed or distributed to third parties or be
// copied or duplicated, in whole or in part, without the prior written
// consent of Autodesk.
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following
// disclaimer, must be included in all copies of the Software, in whole
// or in part, and all derivative works of the Software, unless such copies
// or derivative works are solely in the form of machine-executable object
// code generated by a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
// OR ARISING FROM A COURSE OF DEALING, USAGE, OR TRADE PRACTICE. IN NO
// EVENT WILL AUTODESK AND/OR ITS LICENSORS BE LIABLE FOR ANY LOST
// REVENUES, DATA, OR PROFITS, OR SPECIAL, DIRECT, INDIRECT, OR
// CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS LICENSORS HAS
// BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.
// ==========================================================================
//+
//
// CLASS:    MFnAssembly
//
// ****************************************************************************

#if defined __cplusplus

// ****************************************************************************
// INCLUDED HEADER FILES


#include <maya/MFnDagNode.h>

// ****************************************************************************
// FORWARD DECLARATIONS

class MDagModifier;

// ****************************************************************************
// CLASS DECLARATION (MFnAssembly)

//! \ingroup OpenMaya MFn
//! \brief Function set for scene assembly.
/*!
An assembly is a node that is used to maintain a
list of representations, and to keep one as the active
representation.  Correspondingly, representations can be activated and
inactivated.  In general, a representation can be a full hierarchy of
animated geometry, but can also be as simple as a locator or a
bounding box.  The assembly can be used to activate the
representation that best corresponds to a given task: a simple,
fast-loading, fast-drawing representation for overall planning, or a
more detailed representations for fine tuning.  

The assembly API does not specify the implementation of
representations.  For example, representations can be actual DAG
nodes, or data structures internal to the assembly that
can be used to generate DAG nodes in the Maya scene graph on
representation activation.  In this function set as 
well as in MPxAssembly, representations are identified only by a string
identifier.  Representations in a single MPxAssembly must have unique
string names.  Representation name strings must not contain spaces and
quotes, as these characters would cause argument parsing to fail when
names are used in commands.

Representations are created from a set of representation types, which each
assembly type must define.  A representation of a given
type will share properties (such as viewport appearance, or memory
size) with other representations of the same type.  Examples could
include a "BoundingBox" representation type, or a "BakedGeometry"
representation type.  As with representation names, representation type
name strings must not contain spaces and quotes.  Representation type
names are not used in the UI, and are not localized.  Rather, each
representation type has a corresponding type label that is used for
this purpose.  The representation type label can contain spaces and
quotes, and should be localized.

An assembly object is also a DAG container.  As such, operations on
containers can be done on assemblies.  For use of container
functionality on assemblies, see function set MFnContainerNode.
*/

class OPENMAYA_EXPORT MFnAssembly : public MFnDagNode
{
    declareMFn(MFnAssembly, MFnDagNode);

public:

    static MObjectArray getTopLevelAssemblies();

    MString createRepresentation(
       const MString& input,
       const MString& type,
       MDagModifier*  undoRedo = NULL,
       MStatus*       status = NULL
    );
    MString createRepresentation(
       const MString& input,
       const MString& type,
       const MString& representation,
       MDagModifier*  undoRedo = NULL,
       MStatus*       status = NULL
    );
   
    MStatus  postLoad();

    MStatus activate(const MString& representation);
    MString getActive(MStatus* status = NULL) const;
    MStatus activateNonRecursive(const MString& representation);
    bool    canActivate(MStatus* status = NULL) const;
 
	bool    isActive(const MString& representation, MStatus* status = NULL) const;
 
	// Deprecated
    MString getInitialRep(MStatus* status=NULL) const;

    MString getInitialRep(bool& hasInitialRep, MStatus* status=NULL) const;
  
    MStringArray getRepresentations(MStatus* status = NULL) const;
    MString getRepType(
       const MString& representation, MStatus* status = NULL) const;
    MString getRepLabel(
       const MString& representation, MStatus* status = NULL) const;
   
    MStringArray repTypes(MStatus* status = NULL) const;
   
    MStatus deleteRepresentation(const MString& representation);
    MStatus deleteAllRepresentations();
   
    MString getRepNamespace(MStatus* status = NULL) const;
    MString setRepName(const MString& representation, const MString& newName, MStatus* status = NULL);
    MStatus setRepLabel(const MString& representation, const MString& label);

    MStatus importFile(
       const MString& fileName,
       const char*    type = NULL,
       bool           preserveReferences = false,
       const char*    nameSpace = NULL,
       bool           ignoreVersion = false
    );

   MString getAbsoluteRepNamespace(MStatus* status = NULL) const;

   bool isTopLevel(MStatus* status = NULL) const;
   bool supportsEdits(MStatus* status = NULL) const;
   bool supportsMemberChanges(MStatus* status = NULL) const;

   bool canRepApplyEdits(
   const MString& representation, MStatus* status = NULL) const;

   bool handlesAddEdits(MStatus* status = NULL) const;

   MObject getParentAssembly(MStatus* status = NULL) const;
   MObjectArray	getSubAssemblies(MStatus* status = NULL) const;

BEGIN_NO_SCRIPT_SUPPORT:
    declareMFnConstConstructor(MFnAssembly, MFnDagNode);
END_NO_SCRIPT_SUPPORT:
};

#endif /* __cplusplus */
#endif /* _MFnAssembly */
