#ifndef _MHWGeometryUtilities
#define _MHWGeometryUtilities
//
//-
// ==========================================================================
// Copyright (C) 2013 Autodesk, Inc., and/or its licensors.  All rights
// reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its
// licensors,  which is protected by U.S. and Canadian federal copyright law
// and by international treaties.
//
// The Data may not be disclosed or distributed to third parties or be
// copied or duplicated, in whole or in part, without the prior written
// consent of Autodesk.
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following
// disclaimer, must be included in all copies of the Software, in whole
// or in part, and all derivative works of the Software, unless such copies
// or derivative works are solely in the form of machine-executable object
// code generated by a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
// OR ARISING FROM A COURSE OF DEALING, USAGE, OR TRADE PRACTICE. IN NO
// EVENT WILL AUTODESK AND/OR ITS LICENSORS BE LIABLE FOR ANY LOST
// REVENUES, DATA, OR PROFITS, OR SPECIAL, DIRECT, INDIRECT, OR
// CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS LICENSORS HAS
// BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.
// ==========================================================================
//+
//
// ****************************************************************************

#if defined __cplusplus


// ****************************************************************************
// INCLUDED HEADER FILES

#include <maya/MTypes.h>

class MColor;
class MDagPath;
class MStatus;


// ****************************************************************************
// NAMESPACE

namespace MHWRender
{

class MGeometry;
class MGeometryRequirements;

//! This enum defines the possible drawing modes for individual objects.
enum DisplayStatus {
    kActive,				//!< Object is active (selected). Note that the last selected object will have status kLead instead of kActive. If only one object is selected the status will be kLead.
    kLive,					//!< Object is live (construction surface).
    kDormant,				//!< Object is domant.
    kInvisible,				//!< Object is invisible (not drawn).
    kHilite,				//!< Object is hilited (has selectable components).
    kTemplate,				//!< Object is templated (Not renderable).
    kActiveTemplate,		//!< Object is active and templated.
    kActiveComponent,		//!< Object has active components.
	kLead,					//!< Last selected object.
	kIntermediateObject,	//!< Construction object (not drawn).
	kActiveAffected,		//!< Affected by active object(s).
    kNoStatus				//!< Object does not have a valid display status.
};


// ****************************************************************************
// CLASS DECLARATION (MGeometryUtilities)
//! \ingroup OpenMayaRender
//! \brief Utilities for Viewport 2.0
/*!
This class is a utility class for rendering geometry in Viewport 2.0
*/
class OPENMAYARENDER_EXPORT MGeometryUtilities
{
public:

	static MColor wireframeColor(const MDagPath& path);

    static DisplayStatus displayStatus(const MDagPath& path,
                                       MStatus* returnStatus = NULL);

	//! Default geometry shapes
	enum GeometricShape {
		//! Sphere with radius 1, centered at 0,0,0.
		kDefaultSphere = 0,
		//! Plane with width and height of 1, centered at 0,0,0.
		//! Assuming "Y-Up" orientation: width = x-axis, and height = y-axis.
		kDefaultPlane,
		//! Cube with width, height and depth of 1, centered at 0,0,0.
		kDefaultCube
	};

	static MGeometry* acquireReferenceGeometry(GeometricShape shape, const MGeometryRequirements& requirements);

	static void releaseReferenceGeometry(MGeometry* geometry);

	static const char* className();

private:
    ~MGeometryUtilities();
#ifdef __GNUC__
	friend class shutUpAboutPrivateDestructors;
#endif
};

} // namespace MHWRender

// ****************************************************************************

#endif /* __cplusplus */
#endif /* _MHWGeometryUtilities */

