
void UI_ShowProps( asset& Asset )
{
    Asset.BeginGroup("Properties");
    {
        Asset.showProp( "f_nodraw");
        Asset.showProp( "f_editorvisible");
        Asset.showProp( "f_transparent");
        Asset.showProp( "f_solid");
        Asset.showProp( "f_structual");
        Asset.showProp( "f_detail");
        Asset.showProp( "f_portal");
        Asset.showProp( "f_mount");
        Asset.showProp( "f_stairs");
        Asset.showProp( "f_slick");
        Asset.showProp( "f_sky");
        Asset.showProp( "f_player_clip");
        Asset.showProp( "f_ai_clip");
        Asset.showProp( "f_bullet_clip");
        Asset.showProp( "f_vehicle_clip");
        Asset.showProp( "f_no_fall_dmg");
        Asset.showProp( "f_no_impact");
        Asset.showProp( "f_no_pennetrate");
        Asset.showProp( "f_no_steps");
    }
}


void GenerateUI( asset& Asset )
{
    string cats = Asset.getMaterialCats(); // "Geo | Decal | Effect | UI | Tool";
    // define before we call getPropValue.
    Asset.AddCombo( "cat", cats ).SetTitle( "Category:" ).UpdateOnChange(true);

    string currentMaterialCategory = Asset.getPropValue( "cat" );
    string materialTypes = Asset.getMaterialTypes( currentMaterialCategory );

    Asset.AddCombo( "type", materialTypes ).SetTitle( "Type:" ).UpdateOnChange(true);

    string currentMaterialType = Asset.getPropValue( "type" );

    if ( !Asset.isMaterialType( currentMaterialCategory, currentMaterialType ) )
    {
        Asset.AddLabel("matTypeError", "Invalid cat type combo '" + currentMaterialType + "'").SetTitle(" ").SetBold(true).SetFontColor(1, 0, 0);
    }


    string surTypes = "<none> | Brick | Concrete | Cloth | Flesh | Glass | Gravel | Ice | Metal | Mud | Plastic | Paper | Rock | Snow | Sand | Wood | Water";

    // for grouping in editor
    string usage =
    """
        <none> |
        tools |
        clip |
        ------------------------ |
        Door |
        Floor |
        Celing |
        Roof |
        Wall Interior |
        Wall Exterior |
        Trim Interior |
        Trim Exterior |
        Window |
        Foliage |
        Water |
        Sky |
        Decal
    """;

    Asset.AddCombo( "surface_type", surTypes ).SetTitle( "Surface Type:" );
    Asset.AddCombo( "usage", usage ).SetTitle( "Edtior Group:" );


    string tilingSizes =
    """
        <auto>|
        16|
        32|
        64|
        128|
        256|
        512|
        1024|
        2048|
        4096
    """;

    string climbType =
    """
        <none> |
        ladder |
        mantleOn |
        mantleOver |
        climbWall |
        climbPipe |
    """;

    Asset.AddCombo( "tilingWidth", tilingSizes ).SetTitle( "Tiling Width" ).SetToolTip( "Sets the tiling width of this material. <auto> would use the largest width from the material images." );
    Asset.AddCombo( "tilingHeight", tilingSizes ).SetTitle( "Tiling Height" ).SetToolTip( "Sets the tiling height of this material. <auto> would use the largest height from the material images." );

    Asset.AddCombo( "climbType", climbType ).SetTitle( "Climb Type" );

    string nearestFilters = "nearest (mip none) | nearest (mip nearest) | nearest (mip linear)";
    string linearFilters = "linear (mip none) | linear (mip nearest) | linear (mip linear)";
    string anisotropicFilters = "anisotropicx2 | anisotropicx4| anisotropicx8 | anisotropicx16";
    string filters = nearestFilters + " | " + linearFilters + " | " + anisotropicFilters;

    string tileTypes  = "tile both | tile horizontal | tile vertical | no tile";

    string TileTip = "Wraps the image so it repeats at the edges, or clamps it so it stops at the edges";
    string FilterTip = "Makes the image clearer when viewed from an angle, at some cost of rendering time";

    // ColorMap
    {
        Asset.AddAssetRef( "mapColor", "img" ).SetTitle("Color Map").SetVisible(false);
        Asset.AddCombo( "tileColor", tileTypes ).SetTitle( "Tile Mode" ).SetToolTip( TileTip ).SetVisible(false);
        Asset.AddCombo( "filterColor", filters ).SetTitle( "Filter Mode" ).SetToolTip( FilterTip ).SetDefaultValue( "aniso2x (mip linear)" ).SetVisible(false);

        Asset.AddCheckBox( "alphaTexture", false ).SetTitle( "Alpha Blend" ).SetToolTip("Enable alpha blending").SetVisible(false);
    }


    // NormalMap
    {
        Asset.AddAssetRef( "mapNormal", "img" ).SetTitle("Normal Map").SetVisible(false);

        Asset.AddCombo( "tileNormal", tileTypes ).SetTitle( "Tile Mode" ).SetToolTip( TileTip ).SetVisible(false);
        Asset.AddCombo( "filterNormal", filters ).SetTitle( "Filter Mode" ).SetToolTip( FilterTip ).SetDefaultValue( "aniso2x (mip linear)" ).SetVisible(false);
    }

    // Roughness
    {
        Asset.AddAssetRef( "mapRoughness", "img").SetTitle("Roughness Map").SetVisible(false);

        Asset.AddCombo( "tileRoughness", tileTypes ).SetTitle( "Tile Mode" ).SetToolTip( TileTip ).SetVisible(false);
        Asset.AddCombo( "filterRoughness", filters ).SetTitle( "Filter Mode" ).SetToolTip( FilterTip ).SetDefaultValue( "aniso2x (mip linear)" ).SetVisible(false);
    }

    // AmbientOcclusion
    {
        Asset.AddAssetRef( "mapAmbientOcclusion", "img" ).SetTitle("Ambient Occlusion Map").SetVisible(false);

        Asset.AddCombo( "tileAmbientOcclusion", tileTypes ).SetTitle( "Tile Mode" ).SetToolTip( TileTip ).SetVisible(false);
        Asset.AddCombo( "filterAmbientOcclusion", filters ).SetTitle( "Filter Mode" ).SetToolTip( FilterTip ).SetDefaultValue( "aniso2x (mip linear)" ).SetVisible(false);
    }

    // Metallic
    {
        Asset.AddAssetRef( "mapMetallic", "img" ).SetTitle("Metallic Map").SetVisible(false);

        Asset.AddCombo( "tileMetallic", tileTypes ).SetTitle( "Tile Mode" ).SetToolTip( TileTip ).SetVisible(false);
        Asset.AddCombo( "filterMetallic", filters ).SetTitle( "Filter Mode" ).SetToolTip( FilterTip ).SetDefaultValue( "aniso2x (mip linear)" ).SetVisible(false);
    }

    // Displacement
    {
        Asset.AddAssetRef( "mapDisplacement", "img" ).SetTitle("Displacement Map").SetVisible(false);

        Asset.AddCombo( "tileDisplacement", tileTypes ).SetTitle( "Tile Mode" ).SetToolTip( TileTip ).SetVisible(false);
        Asset.AddCombo( "filterDisplacement", filters ).SetTitle( "Filter Mode" ).SetToolTip( FilterTip ).SetDefaultValue( "aniso2x (mip linear)" ).SetVisible(false);
    }

    // Cammo Map
    {


    }


    // for code generated textures.
    for ( int i = 0; i < 2; i++ )
    {
        string Digit = i;
        Digit = ( Digit.length() == 1 ) ? "0" + Digit : Digit;

        Asset.AddAssetRef( "codeTexture" + Digit, "img" ).SetVisible(false);
    }

    // Atlas
    {
        Asset.AddInt( "textureAtlasRowCount", 1, 1, 512 ).SetTitle( "Row Count" ).SetToolTip( "Set the number of texture atlas rows" ).SetVisible(false);
        Asset.AddInt( "textureAtlasColumnCount", 1, 1, 512 ).SetTitle( "Col Count" ).SetToolTip( "Set the number of texture atlas colums" ).SetVisible(false);
    }

    // UV shizz
    {
        Asset.AddVec2( "uScale", "vScroll", 0.0, 0.0, -10.0, 10.0 ).SetTitle( "Amount" ).SetToolTip( "Texture scroll speed in u direction. 1.0 means the entire texture will scroll by in 1 sec." ).SetVisible(false);
        Asset.AddVec2( "uScroll", "vScale", 0.0, 0.0, -10.0, 10.0 ).SetTitle( "Amount" ).SetToolTip( "Texture scale" ).SetVisible(false);

        Asset.AddCheckBox( "clampU", false ).SetTitle( "Clamp U" ).SetVisible(false);
        Asset.AddCheckBox( "clampV", false ).SetTitle( "Clamp V" ).SetVisible(false);

        Asset.AddFloat( "zoomMin", 1.0, 1.0, 10 ).SetTitle("Zoom Min").SetToolTip( "Texture zoom min" ).SetVisible(false);
        Asset.AddFloat( "zoomMax", 1.0, 1.0, 10 ).SetTitle("Zoom Max").SetToolTip( "Texture zoom max" ).SetVisible(false);
        Asset.AddFloat( "zoomRate", 0.00, 0.0, 128 ).SetTitle("Zoom Rate").SetToolTip( "Texture zoom rate to bounce between the limtis" ).SetVisible(false);
    }

    // Props
    Asset.AddCheckBox( "f_nodraw", false ).SetTitle( "NoDraw" ).SetVisible(false);
    Asset.AddCheckBox( "f_editorvisible", false ).SetTitle( "Editor Visible" ).SetToolTip("makes nodraw visable in editor modes.").SetVisible(false);
    Asset.AddCheckBox( "f_transparent", false ).SetTitle( "Transparent" ).SetToolTip("This material is tranparent. (Will be treaten as none-structual in BSP compiler)").SetVisible(false);
    Asset.AddCheckBox( "f_solid", false ).SetTitle( "Solid" ).SetVisible(false);
    Asset.AddCheckBox( "f_structual", false ).SetTitle( "Structual" ).SetToolTip("Will split BSP in level compiler").SetVisible(false);
    Asset.AddCheckBox( "f_detail", false ).SetTitle( "Detail" ).SetVisible(false);
    Asset.AddCheckBox( "f_portal", false ).SetTitle( "Portal" ).SetVisible(false);
    Asset.AddCheckBox( "f_mount", false ).SetTitle( "Mount" ).SetVisible(false);
    Asset.AddCheckBox( "f_stairs", false ).SetTitle( "Stairs" ).SetVisible(false);
    Asset.AddCheckBox( "f_slick", false ).SetTitle( "Slick" ).SetVisible(false);
    Asset.AddCheckBox( "f_sky", false ).SetTitle( "Sky" ).SetToolTip("Sup :D").SetVisible(false);
    Asset.AddCheckBox( "f_player_clip", false ).SetTitle( "Player Clip" ).SetToolTip("Blocks players").SetVisible(false);
    Asset.AddCheckBox( "f_ai_clip", false ).SetTitle( "AI Clip" ).SetToolTip("Blocks AI (not inc players)").SetVisible(false);
    Asset.AddCheckBox( "f_bullet_clip", false ).SetTitle( "Bullet Clip" ).SetToolTip("Blocks Bullets").SetVisible(false);
    Asset.AddCheckBox( "f_vehicle_clip", false ).SetTitle( "Vehicle Clip" ).SetToolTip("Blocks Vehicles").SetVisible(false);
    Asset.AddCheckBox( "f_no_fall_dmg", false ).SetTitle( "No Fall Dmg" ).SetToolTip("No fall dmg no matter the height!").SetVisible(false);
    Asset.AddCheckBox( "f_no_impact", false ).SetTitle( "No Impact" ).SetToolTip("No impact marks").SetVisible(false);
    Asset.AddCheckBox( "f_no_pennetrate", false ).SetTitle( "No Pennetrate" ).SetToolTip("projectiles and bullets can't penatrate").SetVisible(false);
    Asset.AddCheckBox( "f_no_steps", false ).SetTitle( "No Steps" ).SetToolTip("Disable footstep marks").SetVisible(false);



    if ( Asset.isMaterialType( currentMaterialCategory, currentMaterialType ) )
    {
            Asset.addMaterialTypeProps( currentMaterialCategory, currentMaterialType );

            UI_ShowProps(Asset);
    }
}



/*
    Asset.BeginGroup("Motion");
    {
        Asset.AddCheckBox( "useUVScroll", false ).SetTitle( "UV Scroll" );
        Asset.AddCheckBox( "useUVRotate", false ).SetTitle( "UV Rotate" );

        Asset.AddVec2( "uScroll", "vScroll", 0.0, 0.0, -10.0, 10.0 ).SetTitle( "Amount" ).SetToolTip( "Texture scroll speed in u direction. 1.0 means the entire texture will scroll by in 1 sec." );

        Asset.AddCheckBox( "clampU", false ).SetTitle( "Clamp U" );
        Asset.AddCheckBox( "clampV", false ).SetTitle( "Clamp V" );

    }

    Asset.BeginGroup("Advanced");
    {
        string cullFaceModes = "back | front | none";
        string stencilFunc = "never | less | equal | less_equal | greater | not_equal | greater_equal | always";
        string stencilOp = "keep | zero | replace | incr_sat | decr_sat | invert | incr | decr";
        string polyOffset = "<none> | decal | impact";
        string blendFuncs = "zero | one | src_color | inv_src_color | src_alpha | inv_src_alpha | dest_alpha | inv_dest_alpha | dest_color | inv_dest_color | src_alpha_sat | blend_factor | inv_blend_factor | src1_color | inv_src1_color | src1_alpha | inv_src1_alpha";

        Asset.AddCombo( "srcBlendColor", blendFuncs).SetTitle( "Src Blend Color" ).SetDefaultValue("src_alpha");
        Asset.AddCombo( "dstBlendColor", blendFuncs).SetTitle( "Dst Blend Color" ).SetDefaultValue("src_alpha");
        Asset.AddCombo( "srcBlendAlpha", blendFuncs).SetTitle( "Src Blend Alpha" ).SetDefaultValue("inv_src_alpha");
        Asset.AddCombo( "dstBlendAlpha", blendFuncs).SetTitle( "Dst Blend Alpha" ).SetDefaultValue("inv_src_alpha");
        Asset.AddCombo( "polyOffset", polyOffset).SetTitle( "PolyOffset" );
        Asset.AddCombo( "cullFace", cullFaceModes).SetTitle( "CullFace" );
        Asset.AddCombo( "depthTest", stencilFunc ).SetTitle( "Depth Test" );
        Asset.AddCheckBox( "depthWrite", true ).SetTitle( "Depth Write" );
        Asset.AddCheckBox( "wireFrame", false ).SetTitle( "WireFrame" ); // for shits

    }

*/



